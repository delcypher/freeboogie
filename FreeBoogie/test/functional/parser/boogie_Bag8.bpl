type name;
type ref;
const unique null : ref;
type real;
type elements;
type struct;
type exposeVersionType;
var $Heap : <x>[ref, name]x where IsHeap($Heap);
function IsHeap(h : <x>[ref, name]x) returns ($$unnamed~a : bool);
const $allocated : name;
const $elements : name;
const $inv : name;
const $localinv : name;
const $exposeVersion : name;
axiom (DeclType($exposeVersion) == System.Object);
const $sharingMode : name;
const $SharingMode_Unshared : name;
const $SharingMode_LockProtected : name;
const $ownerRef : name;
const $ownerFrame : name;
const $PeerGroupPlaceholder : name;
function ClassRepr(class : name) returns ($$unnamed~b : ref);
axiom (forall c0 : name, c1 : name :: {ClassRepr(c0), ClassRepr(c1)} ((c0 != c1) ==> (ClassRepr(c0) != ClassRepr(c1))));
axiom (forall T : name :: !($typeof(ClassRepr(T)) <: System.Object));
axiom (forall T : name :: (ClassRepr(T) != null));
axiom (forall T : name, h : <x>[ref, name]x :: {h[ClassRepr(T), $ownerFrame]} (IsHeap(h) ==> (h[ClassRepr(T), $ownerFrame] == $PeerGroupPlaceholder)));
function IsDirectlyModifiableField(f : name) returns ($$unnamed~c : bool);
axiom !IsDirectlyModifiableField($allocated);
axiom IsDirectlyModifiableField($elements);
axiom !IsDirectlyModifiableField($inv);
axiom !IsDirectlyModifiableField($localinv);
axiom !IsDirectlyModifiableField($ownerRef);
axiom !IsDirectlyModifiableField($ownerFrame);
axiom !IsDirectlyModifiableField($exposeVersion);
function IsStaticField(f : name) returns ($$unnamed~d : bool);
axiom !IsStaticField($allocated);
axiom !IsStaticField($elements);
axiom !IsStaticField($inv);
axiom !IsStaticField($localinv);
axiom !IsStaticField($exposeVersion);
function ValueArrayGet<any>($$unnamed~f : elements, $$unnamed~e : int) returns ($$unnamed~g : any);
function ValueArraySet<any>($$unnamed~j : elements, $$unnamed~i : int, $$unnamed~h : any) returns ($$unnamed~k : elements);
function RefArrayGet($$unnamed~m : elements, $$unnamed~l : int) returns ($$unnamed~n : ref);
function RefArraySet($$unnamed~q : elements, $$unnamed~p : int, $$unnamed~o : ref) returns ($$unnamed~r : elements);
axiom (forall<any> A : elements, i : int, x : any :: (ValueArrayGet(ValueArraySet(A, i, x), i) == x));
axiom (forall<any> A : elements, i : int, j : int, x : any :: ((i != j) ==> (ValueArrayGet(ValueArraySet(A, i, x), j) == ValueArrayGet(A, j))));
axiom (forall A : elements, i : int, x : ref :: (RefArrayGet(RefArraySet(A, i, x), i) == x));
axiom (forall A : elements, i : int, j : int, x : ref :: ((i != j) ==> (RefArrayGet(RefArraySet(A, i, x), j) == RefArrayGet(A, j))));
function ArrayIndex(arr : ref, dim : int, indexAtDim : int, remainingIndexContribution : int) returns ($$unnamed~s : int);
axiom (forall a : ref, d : int, x : int, y : int, x' : int, y' : int :: {ArrayIndex(a, d, x, y), ArrayIndex(a, d, x', y')} ((ArrayIndex(a, d, x, y) == ArrayIndex(a, d, x', y')) ==> ((x == x') && (y == y'))));
axiom (forall a : ref, T : name, i : int, r : int, heap : <x>[ref, name]x :: {($typeof(a) <: RefArray(T, r)), RefArrayGet(heap[a, $elements], i)} ((IsHeap(heap) && ($typeof(a) <: RefArray(T, r))) ==> $Is(RefArrayGet(heap[a, $elements], i), T)));
axiom (forall a : ref, T : name, i : int, r : int, heap : <x>[ref, name]x :: {($typeof(a) <: NonNullRefArray(T, r)), RefArrayGet(heap[a, $elements], i)} ((IsHeap(heap) && ($typeof(a) <: NonNullRefArray(T, r))) ==> $IsNotNull(RefArrayGet(heap[a, $elements], i), T)));
function $Rank($$unnamed~t : ref) returns ($$unnamed~u : int);
axiom (forall a : ref :: (1 <= $Rank(a)));
axiom (forall a : ref, T : name, r : int :: {($typeof(a) <: RefArray(T, r))} (((a != null) && ($typeof(a) <: RefArray(T, r))) ==> ($Rank(a) == r)));
axiom (forall a : ref, T : name, r : int :: {($typeof(a) <: NonNullRefArray(T, r))} (((a != null) && ($typeof(a) <: NonNullRefArray(T, r))) ==> ($Rank(a) == r)));
axiom (forall a : ref, T : name, r : int :: {($typeof(a) <: ValueArray(T, r))} (((a != null) && ($typeof(a) <: ValueArray(T, r))) ==> ($Rank(a) == r)));
function $Length($$unnamed~v : ref) returns ($$unnamed~w : int);
axiom (forall a : ref :: {$Length(a)} (0 <= $Length(a)));
function $DimLength($$unnamed~y : ref, $$unnamed~x : int) returns ($$unnamed~z : int);
axiom (forall a : ref, i : int :: (0 <= $DimLength(a, i)));
axiom (forall a : ref :: {$DimLength(a, 0)} (($Rank(a) == 1) ==> ($DimLength(a, 0) == $Length(a))));
function $LBound($$unnamed~ab : ref, $$unnamed~aa : int) returns ($$unnamed~ac : int);
function $UBound($$unnamed~ae : ref, $$unnamed~ad : int) returns ($$unnamed~af : int);
axiom (forall a : ref, i : int :: {$LBound(a, i)} ($LBound(a, i) == 0));
axiom (forall a : ref, i : int :: {$UBound(a, i)} ($UBound(a, i) == ($DimLength(a, i) - 1)));
const $ArrayCategoryValue : name;
const $ArrayCategoryRef : name;
const $ArrayCategoryNonNullRef : name;
function $ArrayCategory(arrayType : name) returns (arrayCategory : name);
axiom (forall T : name, ET : name, r : int :: {(T <: ValueArray(ET, r))} ((T <: ValueArray(ET, r)) ==> ($ArrayCategory(T) == $ArrayCategoryValue)));
axiom (forall T : name, ET : name, r : int :: {(T <: RefArray(ET, r))} ((T <: RefArray(ET, r)) ==> ($ArrayCategory(T) == $ArrayCategoryRef)));
axiom (forall T : name, ET : name, r : int :: {(T <: NonNullRefArray(ET, r))} ((T <: NonNullRefArray(ET, r)) ==> ($ArrayCategory(T) == $ArrayCategoryNonNullRef)));
const System.Array : name;
axiom (System.Array <: System.Object);
function $ElementType($$unnamed~ag : name) returns ($$unnamed~ah : name);
function ValueArray(elementType : name, rank : int) returns ($$unnamed~ai : name);
axiom (forall T : name, r : int :: {ValueArray(T, r)} (ValueArray(T, r) <: System.Array));
function RefArray(elementType : name, rank : int) returns ($$unnamed~aj : name);
axiom (forall T : name, r : int :: {RefArray(T, r)} (RefArray(T, r) <: System.Array));
function NonNullRefArray(elementType : name, rank : int) returns ($$unnamed~ak : name);
axiom (forall T : name, r : int :: {NonNullRefArray(T, r)} (NonNullRefArray(T, r) <: System.Array));
axiom (forall T : name, U : name, r : int :: ((U <: T) ==> (RefArray(U, r) <: RefArray(T, r))));
axiom (forall T : name, U : name, r : int :: ((U <: T) ==> (NonNullRefArray(U, r) <: NonNullRefArray(T, r))));
axiom (forall A : name, r : int :: ($ElementType(ValueArray(A, r)) == A));
axiom (forall A : name, r : int :: ($ElementType(RefArray(A, r)) == A));
axiom (forall A : name, r : int :: ($ElementType(NonNullRefArray(A, r)) == A));
axiom (forall A : name, r : int, T : name :: {(T <: RefArray(A, r))} ((T <: RefArray(A, r)) ==> ((T == RefArray($ElementType(T), r)) && ($ElementType(T) <: A))));
axiom (forall A : name, r : int, T : name :: {(T <: NonNullRefArray(A, r))} ((T <: NonNullRefArray(A, r)) ==> ((T == NonNullRefArray($ElementType(T), r)) && ($ElementType(T) <: A))));
axiom (forall A : name, r : int, T : name :: {(T <: ValueArray(A, r))} ((T <: ValueArray(A, r)) ==> (T == ValueArray(A, r))));
axiom (forall A : name, r : int, T : name :: ((RefArray(A, r) <: T) ==> ((System.Array <: T) || ((T == RefArray($ElementType(T), r)) && (A <: $ElementType(T))))));
axiom (forall A : name, r : int, T : name :: ((NonNullRefArray(A, r) <: T) ==> ((System.Array <: T) || ((T == NonNullRefArray($ElementType(T), r)) && (A <: $ElementType(T))))));
axiom (forall A : name, r : int, T : name :: ((ValueArray(A, r) <: T) ==> ((System.Array <: T) || (T == ValueArray(A, r)))));
function $ArrayPtr(elementType : name) returns ($$unnamed~al : name);
function $StructGet<any>($$unnamed~an : struct, $$unnamed~am : name) returns ($$unnamed~ao : any);
function $StructSet<any>($$unnamed~ar : struct, $$unnamed~aq : name, $$unnamed~ap : any) returns ($$unnamed~as : struct);
axiom (forall<any> s : struct, f : name, x : any :: ($StructGet($StructSet(s, f, x), f) == x));
axiom (forall<any> s : struct, f : name, f' : name, x : any :: ((f != f') ==> ($StructGet($StructSet(s, f, x), f') == $StructGet(s, f'))));
function ZeroInit(s : struct, typ : name) returns ($$unnamed~at : bool);
function $typeof($$unnamed~au : ref) returns ($$unnamed~av : name);
function $BaseClass(sub : name) returns (base : name);
function AsDirectSubClass(sub : name, base : name) returns (sub' : name);
function OneClassDown(sub : name, base : name) returns (directSub : name);
axiom (forall A : name, B : name, C : name :: {(C <: AsDirectSubClass(B, A))} ((C <: AsDirectSubClass(B, A)) ==> (OneClassDown(C, A) == B)));
function $IsValueType($$unnamed~aw : name) returns ($$unnamed~ax : bool);
axiom (forall T : name :: ($IsValueType(T) ==> ((forall U : name :: ((T <: U) ==> (T == U))) && (forall U : name :: ((U <: T) ==> (T == U))))));
const System.Object : name;
function $IsTokenForType($$unnamed~az : struct, $$unnamed~ay : name) returns ($$unnamed~ba : bool);
function TypeObject($$unnamed~bb : name) returns ($$unnamed~bc : ref);
const System.Type : name;
axiom (System.Type <: System.Object);
axiom (forall T : name :: {TypeObject(T)} $IsNotNull(TypeObject(T), System.Type));
function TypeName($$unnamed~bd : ref) returns ($$unnamed~be : name);
axiom (forall T : name :: {TypeObject(T)} (TypeName(TypeObject(T)) == T));
function $Is($$unnamed~bg : ref, $$unnamed~bf : name) returns ($$unnamed~bh : bool);
axiom (forall o : ref, T : name :: {$Is(o, T)} ($Is(o, T) <==> ((o == null) || ($typeof(o) <: T))));
function $IsNotNull($$unnamed~bj : ref, $$unnamed~bi : name) returns ($$unnamed~bk : bool);
axiom (forall o : ref, T : name :: {$IsNotNull(o, T)} ($IsNotNull(o, T) <==> ((o != null) && $Is(o, T))));
function $As($$unnamed~bm : ref, $$unnamed~bl : name) returns ($$unnamed~bn : ref);
axiom (forall o : ref, T : name :: ($Is(o, T) ==> ($As(o, T) == o)));
axiom (forall o : ref, T : name :: (!$Is(o, T) ==> ($As(o, T) == null)));
axiom (forall h : <x>[ref, name]x, o : ref :: {($typeof(o) <: System.Array), h[o, $inv]} (((IsHeap(h) && (o != null)) && ($typeof(o) <: System.Array)) ==> ((h[o, $inv] == $typeof(o)) && (h[o, $localinv] == $typeof(o)))));
function IsAllocated<any>(h : <x>[ref, name]x, o : any) returns ($$unnamed~bo : bool);
axiom (forall h : <x>[ref, name]x, o : ref, f : name :: {IsAllocated(h, h[o, f])} ((IsHeap(h) && h[o, $allocated]) ==> IsAllocated(h, h[o, f])));
axiom (forall h : <x>[ref, name]x, o : ref, f : name :: {h[h[o, f], $allocated]} ((IsHeap(h) && h[o, $allocated]) ==> h[h[o, f], $allocated]));
axiom (forall h : <x>[ref, name]x, s : struct, f : name :: {IsAllocated(h, $StructGet(s, f))} (IsAllocated(h, s) ==> IsAllocated(h, $StructGet(s, f))));
axiom (forall h : <x>[ref, name]x, e : elements, i : int :: {IsAllocated(h, RefArrayGet(e, i))} (IsAllocated(h, e) ==> IsAllocated(h, RefArrayGet(e, i))));
axiom (forall h : <x>[ref, name]x, e : elements, i : int :: {IsAllocated(h, ValueArrayGet(e, i))} (IsAllocated(h, e) ==> IsAllocated(h, ValueArrayGet(e, i))));
axiom (forall h : <x>[ref, name]x, o : ref :: {h[o, $allocated]} (IsAllocated(h, o) ==> h[o, $allocated]));
axiom (forall h : <x>[ref, name]x, c : name :: {h[ClassRepr(c), $allocated]} (IsHeap(h) ==> h[ClassRepr(c), $allocated]));
const $BeingConstructed : ref;
const $NonNullFieldsAreInitialized : name;
function DeclType(field : name) returns (class : name);
function AsNonNullRefField(field : name, T : name) returns (f : name);
function AsRefField(field : name, T : name) returns (f : name);
function AsRangeField(field : name, T : name) returns (f : name);
axiom (forall f : name, T : name :: {AsNonNullRefField(f, T)} ((AsNonNullRefField(f, T) == f) ==> (AsRefField(f, T) == f)));
axiom (forall h : <x>[ref, name]x, o : ref, f : name, T : name :: {h[o, AsRefField(f, T)]} (IsHeap(h) ==> $Is(h[o, AsRefField(f, T)], T)));
axiom (forall h : <x>[ref, name]x, o : ref, f : name, T : name :: {h[o, AsNonNullRefField(f, T)]} (((IsHeap(h) && (o != null)) && ((o != $BeingConstructed) || (h[$BeingConstructed, $NonNullFieldsAreInitialized] == true))) ==> (h[o, AsNonNullRefField(f, T)] != null)));
axiom (forall h : <x>[ref, name]x, o : ref, f : name, T : name :: {h[o, AsRangeField(f, T)]} (IsHeap(h) ==> InRange(h[o, AsRangeField(f, T)], T)));
function $IsMemberlessType($$unnamed~bp : name) returns ($$unnamed~bq : bool);
axiom (forall o : ref :: {$IsMemberlessType($typeof(o))} !$IsMemberlessType($typeof(o)));
function $IsImmutable(T : name) returns ($$unnamed~br : bool);
axiom !$IsImmutable(System.Object);
function $AsImmutable(T : name) returns (theType : name);
function $AsMutable(T : name) returns (theType : name);
axiom (forall T : name, U : name :: {(U <: $AsImmutable(T))} ((U <: $AsImmutable(T)) ==> ($IsImmutable(U) && ($AsImmutable(U) == U))));
axiom (forall T : name, U : name :: {(U <: $AsMutable(T))} ((U <: $AsMutable(T)) ==> (!$IsImmutable(U) && ($AsMutable(U) == U))));
function AsOwner(string : ref, owner : ref) returns (theString : ref);
axiom (forall o : ref, T : name :: {($typeof(o) <: $AsImmutable(T))} ((((o != null) && (o != $BeingConstructed)) && ($typeof(o) <: $AsImmutable(T))) ==> (forall h : <x>[ref, name]x :: {IsHeap(h)} (IsHeap(h) ==> (((((h[o, $inv] == $typeof(o)) && (h[o, $localinv] == $typeof(o))) && (h[o, $ownerFrame] == $PeerGroupPlaceholder)) && (AsOwner(o, h[o, $ownerRef]) == o)) && (forall t : ref :: {AsOwner(o, h[t, $ownerRef])} ((AsOwner(o, h[t, $ownerRef]) == o) ==> ((t == o) || (h[t, $ownerFrame] != $PeerGroupPlaceholder)))))))));
const System.String : name;
function $StringLength($$unnamed~bs : ref) returns ($$unnamed~bt : int);
axiom (forall s : ref :: {$StringLength(s)} (0 <= $StringLength(s)));
function AsRepField(f : name, declaringType : name) returns (theField : name);
axiom (forall h : <x>[ref, name]x, o : ref, f : name, T : name :: {h[o, AsRepField(f, T)]} ((IsHeap(h) && (h[o, AsRepField(f, T)] != null)) ==> ((h[h[o, AsRepField(f, T)], $ownerRef] == o) && (h[h[o, AsRepField(f, T)], $ownerFrame] == T))));
function AsPeerField(f : name) returns (theField : name);
axiom (forall h : <x>[ref, name]x, o : ref, f : name :: {h[o, AsPeerField(f)]} ((IsHeap(h) && (h[o, AsPeerField(f)] != null)) ==> ((h[h[o, AsPeerField(f)], $ownerRef] == h[o, $ownerRef]) && (h[h[o, AsPeerField(f)], $ownerFrame] == h[o, $ownerFrame]))));
axiom (forall h : <x>[ref, name]x, o : ref :: {(h[h[o, $ownerRef], $inv] <: h[o, $ownerFrame])} ((((IsHeap(h) && (h[o, $ownerFrame] != $PeerGroupPlaceholder)) && (h[h[o, $ownerRef], $inv] <: h[o, $ownerFrame])) && (h[h[o, $ownerRef], $localinv] != $BaseClass(h[o, $ownerFrame]))) ==> ((h[o, $inv] == $typeof(o)) && (h[o, $localinv] == $typeof(o)))));
procedure $SetOwner(o : ref, ow : ref, fr : name);
  modifies $Heap;
  ensures (forall p : ref, F : name :: {$Heap[p, F]} (((((F != $ownerRef) && (F != $ownerFrame)) || old(($Heap[p, $ownerRef] != $Heap[o, $ownerRef]))) || old(($Heap[p, $ownerFrame] != $Heap[o, $ownerFrame]))) ==> (old($Heap[p, F]) == $Heap[p, F])));
  ensures (forall p : ref :: {$Heap[p, $ownerRef]} {$Heap[p, $ownerFrame]} ((old(($Heap[p, $ownerRef] == $Heap[o, $ownerRef])) && old(($Heap[p, $ownerFrame] == $Heap[o, $ownerFrame]))) ==> (($Heap[p, $ownerRef] == ow) && ($Heap[p, $ownerFrame] == fr))));
  

procedure $UpdateOwnersForRep(o : ref, T : name, e : ref);
  modifies $Heap;
  ensures (forall p : ref, F : name :: {$Heap[p, F]} (((((F != $ownerRef) && (F != $ownerFrame)) || old(($Heap[p, $ownerRef] != $Heap[e, $ownerRef]))) || old(($Heap[p, $ownerFrame] != $Heap[e, $ownerFrame]))) ==> (old($Heap[p, F]) == $Heap[p, F])));
  ensures ((e == null) ==> ($Heap == old($Heap)));
  ensures ((e != null) ==> (forall p : ref :: {$Heap[p, $ownerRef]} {$Heap[p, $ownerFrame]} ((old(($Heap[p, $ownerRef] == $Heap[e, $ownerRef])) && old(($Heap[p, $ownerFrame] == $Heap[e, $ownerFrame]))) ==> (($Heap[p, $ownerRef] == o) && ($Heap[p, $ownerFrame] == T)))));
  

procedure $UpdateOwnersForPeer(c : ref, d : ref);
  modifies $Heap;
  ensures (forall p : ref, F : name :: {$Heap[p, F]} ((((F != $ownerRef) && (F != $ownerFrame)) || old(((($Heap[p, $ownerRef] != $Heap[c, $ownerRef]) || ($Heap[p, $ownerFrame] != $Heap[c, $ownerFrame])) && (($Heap[p, $ownerRef] != $Heap[d, $ownerRef]) || ($Heap[p, $ownerFrame] != $Heap[d, $ownerFrame]))))) ==> (old($Heap[p, F]) == $Heap[p, F])));
  ensures ((d == null) ==> ($Heap == old($Heap)));
  ensures ((d != null) ==> (forall p : ref :: {$Heap[p, $ownerRef]} {$Heap[p, $ownerFrame]} (((old(($Heap[p, $ownerRef] == $Heap[c, $ownerRef])) && old(($Heap[p, $ownerFrame] == $Heap[c, $ownerFrame]))) || (old(($Heap[p, $ownerRef] == $Heap[d, $ownerRef])) && old(($Heap[p, $ownerFrame] == $Heap[d, $ownerFrame])))) ==> ((((old($Heap)[d, $ownerFrame] == $PeerGroupPlaceholder) && ($Heap[p, $ownerRef] == old($Heap)[c, $ownerRef])) && ($Heap[p, $ownerFrame] == old($Heap)[c, $ownerFrame])) || (((old($Heap)[d, $ownerFrame] != $PeerGroupPlaceholder) && ($Heap[p, $ownerRef] == old($Heap)[d, $ownerRef])) && ($Heap[p, $ownerFrame] == old($Heap)[d, $ownerFrame]))))));
  

const $FirstConsistentOwner : name;
function $AsPureObject($$unnamed~bu : ref) returns ($$unnamed~bv : ref);
function ##FieldDependsOnFCO<any>(o : ref, f : name, ev : exposeVersionType) returns (value : any);
axiom (forall o : ref, f : name, h : <x>[ref, name]x :: {h[$AsPureObject(o), f]} ((((((IsHeap(h) && (o != null)) && (h[o, $allocated] == true)) && (h[o, $ownerFrame] != $PeerGroupPlaceholder)) && (h[h[o, $ownerRef], $inv] <: h[o, $ownerFrame])) && (h[h[o, $ownerRef], $localinv] != $BaseClass(h[o, $ownerFrame]))) ==> (h[o, f] == ##FieldDependsOnFCO(o, f, h[h[o, $FirstConsistentOwner], $exposeVersion]))));
axiom (forall o : ref, h : <x>[ref, name]x :: {h[o, $FirstConsistentOwner]} ((((((IsHeap(h) && (o != null)) && (h[o, $allocated] == true)) && (h[o, $ownerFrame] != $PeerGroupPlaceholder)) && (h[h[o, $ownerRef], $inv] <: h[o, $ownerFrame])) && (h[h[o, $ownerRef], $localinv] != $BaseClass(h[o, $ownerFrame]))) ==> (((h[o, $FirstConsistentOwner] != null) && (h[h[o, $FirstConsistentOwner], $allocated] == true)) && (((h[h[o, $FirstConsistentOwner], $ownerFrame] == $PeerGroupPlaceholder) || !(h[h[h[o, $FirstConsistentOwner], $ownerRef], $inv] <: h[h[o, $FirstConsistentOwner], $ownerFrame])) || (h[h[h[o, $FirstConsistentOwner], $ownerRef], $localinv] == $BaseClass(h[h[o, $FirstConsistentOwner], $ownerFrame]))))));
function Box<any>($$unnamed~bx : any, $$unnamed~bw : ref) returns ($$unnamed~by : ref);
function Unbox<any>($$unnamed~bz : ref) returns ($$unnamed~ca : any);
axiom (forall<any> x : any, p : ref :: {Unbox(Box(x, p))} (Unbox(Box(x, p)) == x));
function UnboxedType($$unnamed~cb : ref) returns ($$unnamed~cc : name);
axiom (forall p : ref :: {$IsValueType(UnboxedType(p))} ($IsValueType(UnboxedType(p)) ==> (forall<any> heap : <x>[ref, name]x, x : any :: {heap[Box(x, p), $inv]} (IsHeap(heap) ==> ((heap[Box(x, p), $inv] == $typeof(Box(x, p))) && (heap[Box(x, p), $localinv] == $typeof(Box(x, p))))))));
axiom (forall<any> x : any, p : ref :: {(UnboxedType(Box(x, p)) <: System.Object)} (((UnboxedType(Box(x, p)) <: System.Object) && (Box(x, p) == p)) ==> (x == p)));
function BoxTester(p : ref, typ : name) returns ($$unnamed~cd : ref);
axiom (forall p : ref, typ : name :: {BoxTester(p, typ)} ((UnboxedType(p) == typ) <==> (BoxTester(p, typ) != null)));
const System.SByte : name;
axiom $IsValueType(System.SByte);
const System.Byte : name;
axiom $IsValueType(System.Byte);
const System.Int16 : name;
axiom $IsValueType(System.Int16);
const System.UInt16 : name;
axiom $IsValueType(System.UInt16);
const System.Int32 : name;
axiom $IsValueType(System.Int32);
const System.UInt32 : name;
axiom $IsValueType(System.UInt32);
const System.Int64 : name;
axiom $IsValueType(System.Int64);
const System.UInt64 : name;
axiom $IsValueType(System.UInt64);
const System.Char : name;
axiom $IsValueType(System.Char);
const int#m2147483648 : int;
const int#2147483647 : int;
const int#4294967295 : int;
const int#m9223372036854775808 : int;
const int#9223372036854775807 : int;
const int#18446744073709551615 : int;
axiom (int#m9223372036854775808 < int#m2147483648);
axiom (int#m2147483648 < (0 - 100000));
axiom (100000 < int#2147483647);
axiom (int#2147483647 < int#4294967295);
axiom (int#4294967295 < int#9223372036854775807);
axiom (int#9223372036854775807 < int#18446744073709551615);
function InRange(i : int, T : name) returns ($$unnamed~ce : bool);
axiom (forall i : int :: (InRange(i, System.SByte) <==> (((0 - 128) <= i) && (i < 128))));
axiom (forall i : int :: (InRange(i, System.Byte) <==> ((0 <= i) && (i < 256))));
axiom (forall i : int :: (InRange(i, System.Int16) <==> (((0 - 32768) <= i) && (i < 32768))));
axiom (forall i : int :: (InRange(i, System.UInt16) <==> ((0 <= i) && (i < 65536))));
axiom (forall i : int :: (InRange(i, System.Int32) <==> ((int#m2147483648 <= i) && (i <= int#2147483647))));
axiom (forall i : int :: (InRange(i, System.UInt32) <==> ((0 <= i) && (i <= int#4294967295))));
axiom (forall i : int :: (InRange(i, System.Int64) <==> ((int#m9223372036854775808 <= i) && (i <= int#9223372036854775807))));
axiom (forall i : int :: (InRange(i, System.UInt64) <==> ((0 <= i) && (i <= int#18446744073709551615))));
axiom (forall i : int :: (InRange(i, System.Char) <==> ((0 <= i) && (i < 65536))));
function $IntToInt(val : int, fromType : name, toType : name) returns ($$unnamed~cf : int);
function $IntToReal($$unnamed~cg : int, fromType : name, toType : name) returns ($$unnamed~ch : real);
function $RealToInt($$unnamed~ci : real, fromType : name, toType : name) returns ($$unnamed~cj : int);
function $RealToReal(val : real, fromType : name, toType : name) returns ($$unnamed~ck : real);
function $SizeIs($$unnamed~cm : name, $$unnamed~cl : int) returns ($$unnamed~cn : bool);
function $IfThenElse<any>($$unnamed~cq : bool, $$unnamed~cp : any, $$unnamed~co : any) returns ($$unnamed~cr : any);
axiom (forall<any> b : bool, x : any, y : any :: {$IfThenElse(b, x, y)} (b ==> ($IfThenElse(b, x, y) == x)));
axiom (forall<any> b : bool, x : any, y : any :: {$IfThenElse(b, x, y)} (!b ==> ($IfThenElse(b, x, y) == y)));
function #neg($$unnamed~cs : int) returns ($$unnamed~ct : int);
function #and($$unnamed~cv : int, $$unnamed~cu : int) returns ($$unnamed~cw : int);
function #or($$unnamed~cy : int, $$unnamed~cx : int) returns ($$unnamed~cz : int);
function #xor($$unnamed~db : int, $$unnamed~da : int) returns ($$unnamed~dc : int);
function #shl($$unnamed~de : int, $$unnamed~dd : int) returns ($$unnamed~df : int);
function #shr($$unnamed~dh : int, $$unnamed~dg : int) returns ($$unnamed~di : int);
function #rneg($$unnamed~dj : real) returns ($$unnamed~dk : real);
function #radd($$unnamed~dm : real, $$unnamed~dl : real) returns ($$unnamed~dn : real);
function #rsub($$unnamed~dp : real, $$unnamed~do : real) returns ($$unnamed~dq : real);
function #rmul($$unnamed~ds : real, $$unnamed~dr : real) returns ($$unnamed~dt : real);
function #rdiv($$unnamed~dv : real, $$unnamed~du : real) returns ($$unnamed~dw : real);
function #rmod($$unnamed~dy : real, $$unnamed~dx : real) returns ($$unnamed~dz : real);
function #rLess($$unnamed~eb : real, $$unnamed~ea : real) returns ($$unnamed~ec : bool);
function #rAtmost($$unnamed~ee : real, $$unnamed~ed : real) returns ($$unnamed~ef : bool);
function #rEq($$unnamed~eh : real, $$unnamed~eg : real) returns ($$unnamed~ei : bool);
function #rNeq($$unnamed~ek : real, $$unnamed~ej : real) returns ($$unnamed~el : bool);
function #rAtleast($$unnamed~en : real, $$unnamed~em : real) returns ($$unnamed~eo : bool);
function #rGreater($$unnamed~eq : real, $$unnamed~ep : real) returns ($$unnamed~er : bool);
axiom (forall x : int, y : int :: {(x % y)} {(x / y)} ((x % y) == (x - ((x / y) * y))));
axiom (forall x : int, y : int :: {(x % y)} (((0 <= x) && (0 < y)) ==> ((0 <= (x % y)) && ((x % y) < y))));
axiom (forall x : int, y : int :: {(x % y)} (((0 <= x) && (y < 0)) ==> ((0 <= (x % y)) && ((x % y) < (0 - y)))));
axiom (forall x : int, y : int :: {(x % y)} (((x <= 0) && (0 < y)) ==> (((0 - y) < (x % y)) && ((x % y) <= 0))));
axiom (forall x : int, y : int :: {(x % y)} (((x <= 0) && (y < 0)) ==> ((y < (x % y)) && ((x % y) <= 0))));
axiom (forall x : int, y : int :: {((x + y) % y)} (((0 <= x) && (0 <= y)) ==> (((x + y) % y) == (x % y))));
axiom (forall x : int, y : int :: {((y + x) % y)} (((0 <= x) && (0 <= y)) ==> (((y + x) % y) == (x % y))));
axiom (forall x : int, y : int :: {((x - y) % y)} (((0 <= (x - y)) && (0 <= y)) ==> (((x - y) % y) == (x % y))));
axiom (forall a : int, b : int, d : int :: {(a % d), (b % d)} ((((2 <= d) && ((a % d) == (b % d))) && (a < b)) ==> ((a + d) <= b)));
axiom (forall x : int, y : int :: {#and(x, y)} (((0 <= x) || (0 <= y)) ==> (0 <= #and(x, y))));
axiom (forall x : int, y : int :: {#or(x, y)} (((0 <= x) && (0 <= y)) ==> ((0 <= #or(x, y)) && (#or(x, y) <= (x + y)))));
axiom (forall i : int :: {#shl(i, 0)} (#shl(i, 0) == i));
axiom (forall i : int, j : int :: ((0 <= j) ==> (#shl(i, (j + 1)) == (#shl(i, j) * 2))));
axiom (forall i : int :: {#shr(i, 0)} (#shr(i, 0) == i));
axiom (forall i : int, j : int :: ((0 <= j) ==> (#shr(i, (j + 1)) == (#shr(i, j) / 2))));
function #System.String.IsInterned$System.String$notnull($$unnamed~es : ref) returns ($$unnamed~et : ref);
function #System.String.Equals$System.String($$unnamed~ev : ref, $$unnamed~eu : ref) returns ($$unnamed~ew : bool);
function #System.String.Equals$System.String$System.String($$unnamed~ey : ref, $$unnamed~ex : ref) returns ($$unnamed~ez : bool);
axiom (forall a : ref, b : ref :: {#System.String.Equals$System.String(a, b)} (#System.String.Equals$System.String(a, b) == #System.String.Equals$System.String$System.String(a, b)));
axiom (forall a : ref, b : ref :: {#System.String.Equals$System.String$System.String(a, b)} (#System.String.Equals$System.String$System.String(a, b) == #System.String.Equals$System.String$System.String(b, a)));
axiom (forall a : ref, b : ref :: {#System.String.Equals$System.String$System.String(a, b)} ((((a != null) && (b != null)) && #System.String.Equals$System.String$System.String(a, b)) ==> (#System.String.IsInterned$System.String$notnull(a) == #System.String.IsInterned$System.String$notnull(b))));
const $UnknownRef : ref;
const Bag.count : name;
const Bag.elems : name;
const System.Collections.Generic.IEnumerable`1...System.Char : name;
const System.Collections.IList : name;
const System.Collections.ICollection : name;
const System.Exception : name;
const Microsoft.Contracts.ICheckedException : name;
const System.Runtime.Serialization.ISerializable : name;
const System.Reflection.ICustomAttributeProvider : name;
const Bag : name;
const System.IComparable : name;
const System.IConvertible : name;
const Microsoft.Contracts.GuardException : name;
const System.Reflection.IReflect : name;
const System.ICloneable : name;
const Microsoft.Contracts.ObjectInvariantException : name;
const System.IEquatable`1...System.String : name;
const System.Boolean : name;
const System.Runtime.InteropServices._MemberInfo : name;
const System.Reflection.MemberInfo : name;
const System.Runtime.InteropServices._Exception : name;
const System.Runtime.InteropServices._Type : name;
const System.IComparable`1...System.String : name;
const System.Collections.IEnumerable : name;
axiom !IsStaticField(Bag.count);
axiom IsDirectlyModifiableField(Bag.count);
axiom (DeclType(Bag.count) == Bag);
axiom (AsRangeField(Bag.count, System.Int32) == Bag.count);
axiom !IsStaticField(Bag.elems);
axiom IsDirectlyModifiableField(Bag.elems);
axiom (AsRepField(Bag.elems, Bag) == Bag.elems);
axiom (DeclType(Bag.elems) == Bag);
axiom (AsNonNullRefField(Bag.elems, ValueArray(System.Int32, 1)) == Bag.elems);
axiom (Bag <: Bag);
axiom ($BaseClass(Bag) == System.Object);
axiom ((Bag <: $BaseClass(Bag)) && (AsDirectSubClass(Bag, $BaseClass(Bag)) == Bag));
axiom (!$IsImmutable(Bag) && ($AsMutable(Bag) == Bag));
axiom (forall $U : name :: {($U <: Bag)} (($U <: Bag) ==> ($U == Bag)));
axiom (forall $oi : ref, $h : <x>[ref, name]x :: {($h[$oi, $inv] <: Bag)} (((IsHeap($h) && ($h[$oi, $inv] <: Bag)) && ($h[$oi, $localinv] != System.Object)) ==> ((0 <= $h[$oi, Bag.count]) && ($h[$oi, Bag.count] <= $Length($h[$oi, Bag.elems])))));
axiom (forall $U : name :: {($U <: System.Boolean)} (($U <: System.Boolean) ==> ($U == System.Boolean)));
procedure Bag.SpecSharp.CheckInvariant$System.Boolean(this : ref, throwException$in : bool where true) returns ($result : bool where true);
  free requires true;
  requires (((($Heap[this, $ownerFrame] == $PeerGroupPlaceholder) || !($Heap[$Heap[this, $ownerRef], $inv] <: $Heap[this, $ownerFrame])) || ($Heap[$Heap[this, $ownerRef], $localinv] == $BaseClass($Heap[this, $ownerFrame]))) && (forall $pc : ref :: ((((($pc != null) && ($Heap[$pc, $allocated] == true)) && ($Heap[$pc, $ownerRef] == $Heap[this, $ownerRef])) && ($Heap[$pc, $ownerFrame] == $Heap[this, $ownerFrame])) ==> (($Heap[$pc, $inv] == $typeof($pc)) && ($Heap[$pc, $localinv] == $typeof($pc))))));
  free requires ($BeingConstructed == null);
  modifies $Heap;
  free ensures true;
  free ensures true;
  free ensures (forall $o : ref :: (((($o != null) && (old($Heap)[$o, $allocated] != true)) && ($Heap[$o, $allocated] == true)) ==> (($Heap[$o, $inv] == $typeof($o)) && ($Heap[$o, $localinv] == $typeof($o)))));
  free ensures (forall $o : ref :: {$Heap[$o, $FirstConsistentOwner]} ((old($Heap)[old($Heap)[$o, $FirstConsistentOwner], $exposeVersion] == $Heap[old($Heap)[$o, $FirstConsistentOwner], $exposeVersion]) ==> (old($Heap)[$o, $FirstConsistentOwner] == $Heap[$o, $FirstConsistentOwner])));
  ensures (forall $o : ref :: ((($o != null) && (old($Heap)[$o, $allocated] == true)) ==> ((old($Heap)[$o, $ownerRef] == $Heap[$o, $ownerRef]) && (old($Heap)[$o, $ownerFrame] == $Heap[$o, $ownerFrame]))));
  free ensures (forall $o : ref, $f : name :: {$Heap[$o, $f]} (((((((((($f != $inv) && ($f != $localinv)) && ($f != $FirstConsistentOwner)) && (!IsStaticField($f) || !IsDirectlyModifiableField($f))) && ($o != null)) && (old($Heap)[$o, $allocated] == true)) && (((old($Heap)[$o, $ownerFrame] == $PeerGroupPlaceholder) || !(old($Heap)[old($Heap)[$o, $ownerRef], $inv] <: old($Heap)[$o, $ownerFrame])) || (old($Heap)[old($Heap)[$o, $ownerRef], $localinv] == $BaseClass(old($Heap)[$o, $ownerFrame])))) && old(true)) && old((($o != this) || ($f != $exposeVersion)))) ==> (old($Heap)[$o, $f] == $Heap[$o, $f])));
  free ensures (forall $o : ref :: (((old($Heap)[$o, $inv] == $Heap[$o, $inv]) && (old($Heap)[$o, $localinv] == $Heap[$o, $localinv])) || (old($Heap)[$o, $allocated] != true)));
  free ensures (((forall $o : ref :: ((old($Heap)[$o, $allocated] == true) ==> ($Heap[$o, $allocated] == true))) && (forall $ot : ref :: (((old($Heap)[$ot, $allocated] == true) && (old($Heap)[$ot, $ownerFrame] != $PeerGroupPlaceholder)) ==> (($Heap[$ot, $ownerRef] == old($Heap)[$ot, $ownerRef]) && ($Heap[$ot, $ownerFrame] == old($Heap)[$ot, $ownerFrame]))))) && (old($Heap)[$BeingConstructed, $NonNullFieldsAreInitialized] == $Heap[$BeingConstructed, $NonNullFieldsAreInitialized]));
  free ensures (forall $o : ref :: (old($Heap[$o, $sharingMode]) == $Heap[$o, $sharingMode]));
  

implementation Bag.SpecSharp.CheckInvariant$System.Boolean(this : ref, throwException$in : bool) returns ($result : bool) {
  var throwException : bool where true;
  var stack0i : int;
  var stack1i : int;
  var stack0b : bool;
  var stack1o : ref;
  var stack50000o : ref;
  var stack0o : ref;
  var return.value : bool where true;
  var SS$Display.Return.Local : bool where true;
  entry: assume $IsNotNull(this, Bag); goto $$entry~b;
  $$entry~b: assume ($Heap[this, $allocated] == true); goto $$entry~a;
  $$entry~a: throwException := throwException$in; goto block5151;
  block5151: goto block5168;
  block5168: stack0i := 0; goto $$block5168~b;
  $$block5168~b: assert (this != null); goto $$block5168~a;
  $$block5168~a: stack1i := $Heap[this, Bag.count]; goto true5168to5219, false5168to5185;
  true5168to5219: assume (stack0i > stack1i); goto block5219;
  false5168to5185: assume (stack0i <= stack1i); goto block5185;
  block5219: goto block5236;
  block5185: assert (this != null); goto $$block5185~e;
  $$block5185~e: stack0i := $Heap[this, Bag.count]; goto $$block5185~d;
  $$block5185~d: assert (this != null); goto $$block5185~c;
  $$block5185~c: stack1o := $Heap[this, Bag.elems]; goto $$block5185~b;
  $$block5185~b: assert (stack1o != null); goto $$block5185~a;
  $$block5185~a: stack1i := $Length(stack1o); goto true5185to5219, false5185to5202;
  true5185to5219: assume (stack0i > stack1i); goto block5219;
  false5185to5202: assume (stack0i <= stack1i); goto block5202;
  block5202: goto block5338;
  block5236: stack0b := throwException; goto true5236to5287, false5236to5253;
  true5236to5287: assume !stack0b; goto block5287;
  false5236to5253: assume stack0b; goto block5253;
  block5287: return.value := false; goto block5389;
  block5253: assume false; goto $$block5253~i;
  $$block5253~i: havoc stack50000o; goto $$block5253~h;
  $$block5253~h: assume ((($Heap[stack50000o, $allocated] == false) && (stack50000o != null)) && ($typeof(stack50000o) == Microsoft.Contracts.ObjectInvariantException)); goto $$block5253~g;
  $$block5253~g: assume (($Heap[stack50000o, $ownerRef] == stack50000o) && ($Heap[stack50000o, $ownerFrame] == $PeerGroupPlaceholder)); goto $$block5253~f;
  $$block5253~f: $Heap := $Heap[stack50000o, $allocated := true]; goto $$block5253~e;
  $$block5253~e: assert (stack50000o != null); goto $$block5253~d;
  $$block5253~d: call Microsoft.Contracts.ObjectInvariantException..ctor(stack50000o); goto $$block5253~c;
  $$block5253~c: stack0o := stack50000o; goto $$block5253~b;
  $$block5253~b: assert (stack0o != null); goto $$block5253~a;
  $$block5253~a: assume false; return;
  block5338: goto block5355;
  block5355: goto block5372;
  block5389: goto block5406;
  block5372: return.value := true; goto block5389;
  block5406: SS$Display.Return.Local := return.value; goto $$block5406~b;
  $$block5406~b: stack0b := return.value; goto $$block5406~a;
  $$block5406~a: $result := stack0b; return;
  
}

axiom (Microsoft.Contracts.ObjectInvariantException <: Microsoft.Contracts.ObjectInvariantException);
axiom (Microsoft.Contracts.GuardException <: Microsoft.Contracts.GuardException);
axiom (System.Exception <: System.Exception);
axiom ($BaseClass(System.Exception) == System.Object);
axiom ((System.Exception <: $BaseClass(System.Exception)) && (AsDirectSubClass(System.Exception, $BaseClass(System.Exception)) == System.Exception));
axiom (!$IsImmutable(System.Exception) && ($AsMutable(System.Exception) == System.Exception));
axiom (System.Runtime.Serialization.ISerializable <: System.Object);
axiom $IsMemberlessType(System.Runtime.Serialization.ISerializable);
axiom (System.Exception <: System.Runtime.Serialization.ISerializable);
axiom (System.Runtime.InteropServices._Exception <: System.Object);
axiom $IsMemberlessType(System.Runtime.InteropServices._Exception);
axiom (System.Exception <: System.Runtime.InteropServices._Exception);
axiom ($BaseClass(Microsoft.Contracts.GuardException) == System.Exception);
axiom ((Microsoft.Contracts.GuardException <: $BaseClass(Microsoft.Contracts.GuardException)) && (AsDirectSubClass(Microsoft.Contracts.GuardException, $BaseClass(Microsoft.Contracts.GuardException)) == Microsoft.Contracts.GuardException));
axiom (!$IsImmutable(Microsoft.Contracts.GuardException) && ($AsMutable(Microsoft.Contracts.GuardException) == Microsoft.Contracts.GuardException));
axiom ($BaseClass(Microsoft.Contracts.ObjectInvariantException) == Microsoft.Contracts.GuardException);
axiom ((Microsoft.Contracts.ObjectInvariantException <: $BaseClass(Microsoft.Contracts.ObjectInvariantException)) && (AsDirectSubClass(Microsoft.Contracts.ObjectInvariantException, $BaseClass(Microsoft.Contracts.ObjectInvariantException)) == Microsoft.Contracts.ObjectInvariantException));
axiom (!$IsImmutable(Microsoft.Contracts.ObjectInvariantException) && ($AsMutable(Microsoft.Contracts.ObjectInvariantException) == Microsoft.Contracts.ObjectInvariantException));
procedure Microsoft.Contracts.ObjectInvariantException..ctor(this : ref);
  free requires (forall $o : ref :: (($o != this) ==> ($Heap[$o, $ownerRef] != this)));
  free requires (($Heap[this, $ownerRef] == this) && ($Heap[this, $ownerFrame] == $PeerGroupPlaceholder));
  free requires (forall $o : ref :: ((($Heap[$o, $ownerRef] == $Heap[this, $ownerRef]) && ($Heap[$o, $ownerFrame] == $Heap[this, $ownerFrame])) ==> ($o == this)));
  free requires ($BeingConstructed == this);
  modifies $Heap;
  ensures ((((($Heap[this, $ownerFrame] == $PeerGroupPlaceholder) || !($Heap[$Heap[this, $ownerRef], $inv] <: $Heap[this, $ownerFrame])) || ($Heap[$Heap[this, $ownerRef], $localinv] == $BaseClass($Heap[this, $ownerFrame]))) && ($Heap[this, $inv] == Microsoft.Contracts.ObjectInvariantException)) && ($Heap[this, $localinv] == $typeof(this)));
  ensures (($Heap[this, $ownerRef] == old($Heap)[this, $ownerRef]) && ($Heap[this, $ownerFrame] == old($Heap)[this, $ownerFrame]));
  ensures ($Heap[this, $sharingMode] == $SharingMode_Unshared);
  free ensures (forall $o : ref :: (((($o != null) && (old($Heap)[$o, $allocated] != true)) && ($Heap[$o, $allocated] == true)) ==> (($Heap[$o, $inv] == $typeof($o)) && ($Heap[$o, $localinv] == $typeof($o)))));
  free ensures (forall $o : ref :: {$Heap[$o, $FirstConsistentOwner]} ((old($Heap)[old($Heap)[$o, $FirstConsistentOwner], $exposeVersion] == $Heap[old($Heap)[$o, $FirstConsistentOwner], $exposeVersion]) ==> (old($Heap)[$o, $FirstConsistentOwner] == $Heap[$o, $FirstConsistentOwner])));
  ensures (forall $o : ref :: ((($o != null) && (old($Heap)[$o, $allocated] == true)) ==> ((old($Heap)[$o, $ownerRef] == $Heap[$o, $ownerRef]) && (old($Heap)[$o, $ownerFrame] == $Heap[$o, $ownerFrame]))));
  free ensures (forall $o : ref, $f : name :: {$Heap[$o, $f]} (((((((((($f != $inv) && ($f != $localinv)) && ($f != $FirstConsistentOwner)) && (!IsStaticField($f) || !IsDirectlyModifiableField($f))) && ($o != null)) && (old($Heap)[$o, $allocated] == true)) && (((old($Heap)[$o, $ownerFrame] == $PeerGroupPlaceholder) || !(old($Heap)[old($Heap)[$o, $ownerRef], $inv] <: old($Heap)[$o, $ownerFrame])) || (old($Heap)[old($Heap)[$o, $ownerRef], $localinv] == $BaseClass(old($Heap)[$o, $ownerFrame])))) && (($o != this) || !(Microsoft.Contracts.ObjectInvariantException <: DeclType($f)))) && old(true)) ==> (old($Heap)[$o, $f] == $Heap[$o, $f])));
  free ensures (forall $o : ref :: ((($o == this) || ((old($Heap)[$o, $inv] == $Heap[$o, $inv]) && (old($Heap)[$o, $localinv] == $Heap[$o, $localinv]))) || (old($Heap)[$o, $allocated] != true)));
  free ensures (((forall $o : ref :: ((old($Heap)[$o, $allocated] == true) ==> ($Heap[$o, $allocated] == true))) && (forall $ot : ref :: (((old($Heap)[$ot, $allocated] == true) && (old($Heap)[$ot, $ownerFrame] != $PeerGroupPlaceholder)) ==> (($Heap[$ot, $ownerRef] == old($Heap)[$ot, $ownerRef]) && ($Heap[$ot, $ownerFrame] == old($Heap)[$ot, $ownerFrame]))))) && (old($Heap)[$BeingConstructed, $NonNullFieldsAreInitialized] == $Heap[$BeingConstructed, $NonNullFieldsAreInitialized]));
  free ensures (forall $o : ref :: (($o == this) || (old($Heap[$o, $sharingMode]) == $Heap[$o, $sharingMode])));
  

procedure Bag..ctor$System.Int32.array$notnull(this : ref, initialElements$in : ref where $IsNotNull(initialElements$in, ValueArray(System.Int32, 1)));
  free requires ($Heap[initialElements$in, $allocated] == true);
  requires (((($Heap[initialElements$in, $ownerFrame] == $PeerGroupPlaceholder) || !($Heap[$Heap[initialElements$in, $ownerRef], $inv] <: $Heap[initialElements$in, $ownerFrame])) || ($Heap[$Heap[initialElements$in, $ownerRef], $localinv] == $BaseClass($Heap[initialElements$in, $ownerFrame]))) && (forall $pc : ref :: ((((($pc != null) && ($Heap[$pc, $allocated] == true)) && ($Heap[$pc, $ownerRef] == $Heap[initialElements$in, $ownerRef])) && ($Heap[$pc, $ownerFrame] == $Heap[initialElements$in, $ownerFrame])) ==> (($Heap[$pc, $inv] == $typeof($pc)) && ($Heap[$pc, $localinv] == $typeof($pc))))));
  free requires (forall $o : ref :: (($o != this) ==> ($Heap[$o, $ownerRef] != this)));
  free requires (($Heap[this, $ownerRef] == this) && ($Heap[this, $ownerFrame] == $PeerGroupPlaceholder));
  free requires (forall $o : ref :: ((($Heap[$o, $ownerRef] == $Heap[this, $ownerRef]) && ($Heap[$o, $ownerFrame] == $Heap[this, $ownerFrame])) ==> ($o == this)));
  free requires ($BeingConstructed == this);
  modifies $Heap;
  ensures ((((($Heap[this, $ownerFrame] == $PeerGroupPlaceholder) || !($Heap[$Heap[this, $ownerRef], $inv] <: $Heap[this, $ownerFrame])) || ($Heap[$Heap[this, $ownerRef], $localinv] == $BaseClass($Heap[this, $ownerFrame]))) && ($Heap[this, $inv] == Bag)) && ($Heap[this, $localinv] == $typeof(this)));
  ensures (($Heap[this, $ownerRef] == old($Heap)[this, $ownerRef]) && ($Heap[this, $ownerFrame] == old($Heap)[this, $ownerFrame]));
  ensures ($Heap[this, $sharingMode] == $SharingMode_Unshared);
  free ensures (forall $o : ref :: (((($o != null) && (old($Heap)[$o, $allocated] != true)) && ($Heap[$o, $allocated] == true)) ==> (($Heap[$o, $inv] == $typeof($o)) && ($Heap[$o, $localinv] == $typeof($o)))));
  free ensures (forall $o : ref :: {$Heap[$o, $FirstConsistentOwner]} ((old($Heap)[old($Heap)[$o, $FirstConsistentOwner], $exposeVersion] == $Heap[old($Heap)[$o, $FirstConsistentOwner], $exposeVersion]) ==> (old($Heap)[$o, $FirstConsistentOwner] == $Heap[$o, $FirstConsistentOwner])));
  ensures (forall $o : ref :: ((($o != null) && (old($Heap)[$o, $allocated] == true)) ==> ((old($Heap)[$o, $ownerRef] == $Heap[$o, $ownerRef]) && (old($Heap)[$o, $ownerFrame] == $Heap[$o, $ownerFrame]))));
  free ensures (forall $o : ref, $f : name :: {$Heap[$o, $f]} (((((((((($f != $inv) && ($f != $localinv)) && ($f != $FirstConsistentOwner)) && (!IsStaticField($f) || !IsDirectlyModifiableField($f))) && ($o != null)) && (old($Heap)[$o, $allocated] == true)) && (((old($Heap)[$o, $ownerFrame] == $PeerGroupPlaceholder) || !(old($Heap)[old($Heap)[$o, $ownerRef], $inv] <: old($Heap)[$o, $ownerFrame])) || (old($Heap)[old($Heap)[$o, $ownerRef], $localinv] == $BaseClass(old($Heap)[$o, $ownerFrame])))) && (($o != this) || !(Bag <: DeclType($f)))) && old(true)) ==> (old($Heap)[$o, $f] == $Heap[$o, $f])));
  free ensures (forall $o : ref :: ((($o == this) || ((old($Heap)[$o, $inv] == $Heap[$o, $inv]) && (old($Heap)[$o, $localinv] == $Heap[$o, $localinv]))) || (old($Heap)[$o, $allocated] != true)));
  free ensures (((forall $o : ref :: ((old($Heap)[$o, $allocated] == true) ==> ($Heap[$o, $allocated] == true))) && (forall $ot : ref :: (((old($Heap)[$ot, $allocated] == true) && (old($Heap)[$ot, $ownerFrame] != $PeerGroupPlaceholder)) ==> (($Heap[$ot, $ownerRef] == old($Heap)[$ot, $ownerRef]) && ($Heap[$ot, $ownerFrame] == old($Heap)[$ot, $ownerFrame]))))) && (old($Heap)[$BeingConstructed, $NonNullFieldsAreInitialized] == $Heap[$BeingConstructed, $NonNullFieldsAreInitialized]));
  free ensures (forall $o : ref :: (($o == this) || (old($Heap[$o, $sharingMode]) == $Heap[$o, $sharingMode])));
  

implementation Bag..ctor$System.Int32.array$notnull(this : ref, initialElements$in : ref) {
  var initialElements : ref where $IsNotNull(initialElements, ValueArray(System.Int32, 1));
  var stack0i : int;
  var e : ref where $Is(e, ValueArray(System.Int32, 1));
  var stack0o : ref;
  var stack1i : int;
  var stack2o : ref;
  var stack3i : int;
  var stack4i : int;
  var temp0 : ref;
  entry: assume $IsNotNull(this, Bag); goto $$entry~f;
  $$entry~f: assume ($Heap[this, $allocated] == true); goto $$entry~e;
  $$entry~e: assume ((((($Heap[this, $ownerFrame] == $PeerGroupPlaceholder) || !($Heap[$Heap[this, $ownerRef], $inv] <: $Heap[this, $ownerFrame])) || ($Heap[$Heap[this, $ownerRef], $localinv] == $BaseClass($Heap[this, $ownerFrame]))) && ($Heap[this, $inv] == System.Object)) && ($Heap[this, $localinv] == $typeof(this))); goto $$entry~d;
  $$entry~d: initialElements := initialElements$in; goto $$entry~c;
  $$entry~c: assume ($Heap[this, Bag.count] == 0); goto block6086;
  block6086: goto block6290;
  block6290: goto block6307;
  block6307: goto block6324;
  block6324: goto block6341;
  block6341: goto block6358;
  block6358: assert (initialElements != null); goto $$block6358~e;
  $$block6358~e: stack0i := $Length(initialElements); goto $$block6358~d;
  $$block6358~d: assert (this != null); goto $$block6358~c;
  $$block6358~c: assert (!($Heap[this, $inv] <: Bag) || ($Heap[this, $localinv] == System.Object)); goto $$block6358~b;
  $$block6358~b: $Heap := $Heap[this, Bag.count := stack0i]; goto $$block6358~a;
  $$block6358~a: assume IsHeap($Heap); goto block6375;
  block6375: assert (initialElements != null); goto $$block6375~j;
  $$block6375~j: stack0i := $Length(initialElements); goto $$block6375~i;
  $$block6375~i: assert (0 <= stack0i); goto $$block6375~h;
  $$block6375~h: havoc e; goto $$block6375~g;
  $$block6375~g: assume (($Heap[e, $allocated] == false) && ($Length(e) == stack0i)); goto $$block6375~f;
  $$block6375~f: assume $IsNotNull(e, ValueArray(System.Int32, 1)); goto $$block6375~e;
  $$block6375~e: assume (($Heap[e, $ownerRef] == e) && ($Heap[e, $ownerFrame] == $PeerGroupPlaceholder)); goto $$block6375~d;
  $$block6375~d: assume ((($Heap[e, $inv] == ValueArray(System.Int32, 1)) && ($Heap[e, $localinv] == ValueArray(System.Int32, 1))) && ((($Heap[e, $ownerFrame] == $PeerGroupPlaceholder) || !($Heap[$Heap[e, $ownerRef], $inv] <: $Heap[e, $ownerFrame])) || ($Heap[$Heap[e, $ownerRef], $localinv] == $BaseClass($Heap[e, $ownerFrame])))); goto $$block6375~c;
  $$block6375~c: assume (forall $i : int :: (ValueArrayGet($Heap[e, $elements], $i) == 0)); goto $$block6375~b;
  $$block6375~b: $Heap := $Heap[e, $allocated := true]; goto $$block6375~a;
  $$block6375~a: assume IsHeap($Heap); goto block6392;
  block6392: stack0o := initialElements; goto $$block6392~q;
  $$block6392~q: stack1i := 0; goto $$block6392~p;
  $$block6392~p: stack2o := e; goto $$block6392~o;
  $$block6392~o: assert (stack2o != null); goto $$block6392~n;
  $$block6392~n: stack2o := stack2o; goto $$block6392~m;
  $$block6392~m: stack3i := 0; goto $$block6392~l;
  $$block6392~l: assert (initialElements != null); goto $$block6392~k;
  $$block6392~k: stack4i := $Length(initialElements); goto $$block6392~j;
  $$block6392~j: call System.Array.Copy$System.Array$notnull$System.Int32$System.Array$notnull$System.Int32$System.Int32(stack0o, stack1i, stack2o, stack3i, stack4i); goto $$block6392~i;
  $$block6392~i: stack0o := e; goto $$block6392~h;
  $$block6392~h: assert (stack0o != null); goto $$block6392~g;
  $$block6392~g: stack0o := stack0o; goto $$block6392~f;
  $$block6392~f: assert (this != null); goto $$block6392~e;
  $$block6392~e: assert (!($Heap[this, $inv] <: Bag) || ($Heap[this, $localinv] == System.Object)); goto $$block6392~d;
  $$block6392~d: assert (($Heap[stack0o, $ownerFrame] == $PeerGroupPlaceholder) || (($Heap[stack0o, $ownerRef] == this) && ($Heap[stack0o, $ownerFrame] == Bag))); goto $$block6392~c;
  $$block6392~c: $Heap := $Heap[this, Bag.elems := stack0o]; goto $$block6392~b;
  $$block6392~b: call $UpdateOwnersForRep(this, Bag, stack0o); goto $$block6392~a;
  $$block6392~a: assume IsHeap($Heap); goto block6409;
  block6409: assert (this != null); goto $$block6409~a;
  $$block6409~a: call System.Object..ctor(this); goto block6528;
  block6528: goto block6545;
  block6545: goto block6562;
  block6562: goto block6579;
  block6579: temp0 := this; goto $$block6579~f;
  $$block6579~f: assert (temp0 != null); goto $$block6579~e;
  $$block6579~e: assert (($Heap[temp0, $inv] == System.Object) && ($Heap[temp0, $localinv] == $typeof(temp0))); goto $$block6579~d;
  $$block6579~d: assert ((0 <= $Heap[temp0, Bag.count]) && ($Heap[temp0, Bag.count] <= $Length($Heap[temp0, Bag.elems]))); goto $$block6579~c;
  $$block6579~c: assert (forall $p : ref :: ((((($p != null) && ($Heap[$p, $allocated] == true)) && ($Heap[$p, $ownerRef] == temp0)) && ($Heap[$p, $ownerFrame] == Bag)) ==> (($Heap[$p, $inv] == $typeof($p)) && ($Heap[$p, $localinv] == $typeof($p))))); goto $$block6579~b;
  $$block6579~b: $Heap := $Heap[temp0, $inv := Bag]; goto $$block6579~a;
  $$block6579~a: assume IsHeap($Heap); return;
  
}

axiom (System.Array <: System.Array);
axiom ($BaseClass(System.Array) == System.Object);
axiom ((System.Array <: $BaseClass(System.Array)) && (AsDirectSubClass(System.Array, $BaseClass(System.Array)) == System.Array));
axiom (!$IsImmutable(System.Array) && ($AsMutable(System.Array) == System.Array));
axiom (System.ICloneable <: System.Object);
axiom $IsMemberlessType(System.ICloneable);
axiom (System.Array <: System.ICloneable);
axiom (System.Collections.IList <: System.Object);
axiom (System.Collections.ICollection <: System.Object);
axiom (System.Collections.IEnumerable <: System.Object);
axiom $IsMemberlessType(System.Collections.IEnumerable);
axiom (System.Collections.ICollection <: System.Collections.IEnumerable);
axiom $IsMemberlessType(System.Collections.ICollection);
axiom (System.Collections.IList <: System.Collections.ICollection);
axiom (System.Collections.IList <: System.Collections.IEnumerable);
axiom $IsMemberlessType(System.Collections.IList);
axiom (System.Array <: System.Collections.IList);
axiom (System.Array <: System.Collections.ICollection);
axiom (System.Array <: System.Collections.IEnumerable);
axiom $IsMemberlessType(System.Array);
procedure System.Array.Copy$System.Array$notnull$System.Int32$System.Array$notnull$System.Int32$System.Int32(sourceArray$in : ref where $IsNotNull(sourceArray$in, System.Array), sourceIndex$in : int where InRange(sourceIndex$in, System.Int32), destinationArray$in : ref where $IsNotNull(destinationArray$in, System.Array), destinationIndex$in : int where InRange(destinationIndex$in, System.Int32), length$in : int where InRange(length$in, System.Int32));
  free requires ($Heap[sourceArray$in, $allocated] == true);
  free requires true;
  free requires ($Heap[destinationArray$in, $allocated] == true);
  free requires true;
  free requires true;
  requires (sourceArray$in != null);
  requires (destinationArray$in != null);
  requires ($Rank(sourceArray$in) == $Rank(destinationArray$in));
  requires (sourceIndex$in >= $LBound(sourceArray$in, 0));
  requires (destinationIndex$in >= $LBound(destinationArray$in, 0));
  requires (length$in >= 0);
  requires ((sourceIndex$in + length$in) <= ($LBound(sourceArray$in, 0) + $Length(sourceArray$in)));
  requires ((destinationIndex$in + length$in) <= ($LBound(destinationArray$in, 0) + $Length(destinationArray$in)));
  requires (((($Heap[sourceArray$in, $ownerFrame] == $PeerGroupPlaceholder) || !($Heap[$Heap[sourceArray$in, $ownerRef], $inv] <: $Heap[sourceArray$in, $ownerFrame])) || ($Heap[$Heap[sourceArray$in, $ownerRef], $localinv] == $BaseClass($Heap[sourceArray$in, $ownerFrame]))) && (forall $pc : ref :: ((((($pc != null) && ($Heap[$pc, $allocated] == true)) && ($Heap[$pc, $ownerRef] == $Heap[sourceArray$in, $ownerRef])) && ($Heap[$pc, $ownerFrame] == $Heap[sourceArray$in, $ownerFrame])) ==> (($Heap[$pc, $inv] == $typeof($pc)) && ($Heap[$pc, $localinv] == $typeof($pc))))));
  requires (((($Heap[destinationArray$in, $ownerFrame] == $PeerGroupPlaceholder) || !($Heap[$Heap[destinationArray$in, $ownerRef], $inv] <: $Heap[destinationArray$in, $ownerFrame])) || ($Heap[$Heap[destinationArray$in, $ownerRef], $localinv] == $BaseClass($Heap[destinationArray$in, $ownerFrame]))) && (forall $pc : ref :: ((((($pc != null) && ($Heap[$pc, $allocated] == true)) && ($Heap[$pc, $ownerRef] == $Heap[destinationArray$in, $ownerRef])) && ($Heap[$pc, $ownerFrame] == $Heap[destinationArray$in, $ownerFrame])) ==> (($Heap[$pc, $inv] == $typeof($pc)) && ($Heap[$pc, $localinv] == $typeof($pc))))));
  free requires ($BeingConstructed == null);
  modifies $Heap;
  free ensures (forall $o : ref :: (((($o != null) && (old($Heap)[$o, $allocated] != true)) && ($Heap[$o, $allocated] == true)) ==> (($Heap[$o, $inv] == $typeof($o)) && ($Heap[$o, $localinv] == $typeof($o)))));
  free ensures (forall $o : ref :: {$Heap[$o, $FirstConsistentOwner]} ((old($Heap)[old($Heap)[$o, $FirstConsistentOwner], $exposeVersion] == $Heap[old($Heap)[$o, $FirstConsistentOwner], $exposeVersion]) ==> (old($Heap)[$o, $FirstConsistentOwner] == $Heap[$o, $FirstConsistentOwner])));
  ensures (forall $o : ref :: ((($o != null) && (old($Heap)[$o, $allocated] == true)) ==> ((old($Heap)[$o, $ownerRef] == $Heap[$o, $ownerRef]) && (old($Heap)[$o, $ownerFrame] == $Heap[$o, $ownerFrame]))));
  free ensures (forall $o : ref, $f : name :: {$Heap[$o, $f]} (((((((((($f != $inv) && ($f != $localinv)) && ($f != $FirstConsistentOwner)) && (!IsStaticField($f) || !IsDirectlyModifiableField($f))) && ($o != null)) && (old($Heap)[$o, $allocated] == true)) && (((old($Heap)[$o, $ownerFrame] == $PeerGroupPlaceholder) || !(old($Heap)[old($Heap)[$o, $ownerRef], $inv] <: old($Heap)[$o, $ownerFrame])) || (old($Heap)[old($Heap)[$o, $ownerRef], $localinv] == $BaseClass(old($Heap)[$o, $ownerFrame])))) && old(true)) && old(true)) ==> (old($Heap)[$o, $f] == $Heap[$o, $f])));
  free ensures (forall $o : ref :: (((old($Heap)[$o, $inv] == $Heap[$o, $inv]) && (old($Heap)[$o, $localinv] == $Heap[$o, $localinv])) || (old($Heap)[$o, $allocated] != true)));
  free ensures (((forall $o : ref :: ((old($Heap)[$o, $allocated] == true) ==> ($Heap[$o, $allocated] == true))) && (forall $ot : ref :: (((old($Heap)[$ot, $allocated] == true) && (old($Heap)[$ot, $ownerFrame] != $PeerGroupPlaceholder)) ==> (($Heap[$ot, $ownerRef] == old($Heap)[$ot, $ownerRef]) && ($Heap[$ot, $ownerFrame] == old($Heap)[$ot, $ownerFrame]))))) && (old($Heap)[$BeingConstructed, $NonNullFieldsAreInitialized] == $Heap[$BeingConstructed, $NonNullFieldsAreInitialized]));
  free ensures (forall $o : ref :: (old($Heap[$o, $sharingMode]) == $Heap[$o, $sharingMode]));
  

procedure System.Object..ctor(this : ref);
  free requires (forall $o : ref :: (($o != this) ==> ($Heap[$o, $ownerRef] != this)));
  free requires (($Heap[this, $ownerRef] == this) && ($Heap[this, $ownerFrame] == $PeerGroupPlaceholder));
  free requires (forall $o : ref :: ((($Heap[$o, $ownerRef] == $Heap[this, $ownerRef]) && ($Heap[$o, $ownerFrame] == $Heap[this, $ownerFrame])) ==> ($o == this)));
  free requires ($BeingConstructed == this);
  modifies $Heap;
  ensures ((((($Heap[this, $ownerFrame] == $PeerGroupPlaceholder) || !($Heap[$Heap[this, $ownerRef], $inv] <: $Heap[this, $ownerFrame])) || ($Heap[$Heap[this, $ownerRef], $localinv] == $BaseClass($Heap[this, $ownerFrame]))) && ($Heap[this, $inv] == System.Object)) && ($Heap[this, $localinv] == $typeof(this)));
  ensures (($Heap[this, $ownerRef] == old($Heap)[this, $ownerRef]) && ($Heap[this, $ownerFrame] == old($Heap)[this, $ownerFrame]));
  ensures ($Heap[this, $sharingMode] == $SharingMode_Unshared);
  free ensures (forall $o : ref :: (((($o != null) && (old($Heap)[$o, $allocated] != true)) && ($Heap[$o, $allocated] == true)) ==> (($Heap[$o, $inv] == $typeof($o)) && ($Heap[$o, $localinv] == $typeof($o)))));
  free ensures (forall $o : ref :: {$Heap[$o, $FirstConsistentOwner]} ((old($Heap)[old($Heap)[$o, $FirstConsistentOwner], $exposeVersion] == $Heap[old($Heap)[$o, $FirstConsistentOwner], $exposeVersion]) ==> (old($Heap)[$o, $FirstConsistentOwner] == $Heap[$o, $FirstConsistentOwner])));
  ensures (forall $o : ref :: ((($o != null) && (old($Heap)[$o, $allocated] == true)) ==> ((old($Heap)[$o, $ownerRef] == $Heap[$o, $ownerRef]) && (old($Heap)[$o, $ownerFrame] == $Heap[$o, $ownerFrame]))));
  free ensures (forall $o : ref, $f : name :: {$Heap[$o, $f]} (((((((((($f != $inv) && ($f != $localinv)) && ($f != $FirstConsistentOwner)) && (!IsStaticField($f) || !IsDirectlyModifiableField($f))) && ($o != null)) && (old($Heap)[$o, $allocated] == true)) && (((old($Heap)[$o, $ownerFrame] == $PeerGroupPlaceholder) || !(old($Heap)[old($Heap)[$o, $ownerRef], $inv] <: old($Heap)[$o, $ownerFrame])) || (old($Heap)[old($Heap)[$o, $ownerRef], $localinv] == $BaseClass(old($Heap)[$o, $ownerFrame])))) && (($o != this) || !(System.Object <: DeclType($f)))) && old(true)) ==> (old($Heap)[$o, $f] == $Heap[$o, $f])));
  free ensures (forall $o : ref :: ((($o == this) || ((old($Heap)[$o, $inv] == $Heap[$o, $inv]) && (old($Heap)[$o, $localinv] == $Heap[$o, $localinv]))) || (old($Heap)[$o, $allocated] != true)));
  free ensures (((forall $o : ref :: ((old($Heap)[$o, $allocated] == true) ==> ($Heap[$o, $allocated] == true))) && (forall $ot : ref :: (((old($Heap)[$ot, $allocated] == true) && (old($Heap)[$ot, $ownerFrame] != $PeerGroupPlaceholder)) ==> (($Heap[$ot, $ownerRef] == old($Heap)[$ot, $ownerRef]) && ($Heap[$ot, $ownerFrame] == old($Heap)[$ot, $ownerFrame]))))) && (old($Heap)[$BeingConstructed, $NonNullFieldsAreInitialized] == $Heap[$BeingConstructed, $NonNullFieldsAreInitialized]));
  free ensures (forall $o : ref :: (($o == this) || (old($Heap[$o, $sharingMode]) == $Heap[$o, $sharingMode])));
  

procedure Bag..ctor$System.Int32.array$notnull$System.Int32$System.Int32(this : ref, initialElements$in : ref where $IsNotNull(initialElements$in, ValueArray(System.Int32, 1)), start$in : int where InRange(start$in, System.Int32), howMany$in : int where InRange(howMany$in, System.Int32));
  free requires ($Heap[initialElements$in, $allocated] == true);
  free requires true;
  free requires true;
  requires ((0 <= start$in) && (0 <= howMany$in));
  requires ((start$in + howMany$in) <= $Length(initialElements$in));
  requires (((($Heap[initialElements$in, $ownerFrame] == $PeerGroupPlaceholder) || !($Heap[$Heap[initialElements$in, $ownerRef], $inv] <: $Heap[initialElements$in, $ownerFrame])) || ($Heap[$Heap[initialElements$in, $ownerRef], $localinv] == $BaseClass($Heap[initialElements$in, $ownerFrame]))) && (forall $pc : ref :: ((((($pc != null) && ($Heap[$pc, $allocated] == true)) && ($Heap[$pc, $ownerRef] == $Heap[initialElements$in, $ownerRef])) && ($Heap[$pc, $ownerFrame] == $Heap[initialElements$in, $ownerFrame])) ==> (($Heap[$pc, $inv] == $typeof($pc)) && ($Heap[$pc, $localinv] == $typeof($pc))))));
  free requires (forall $o : ref :: (($o != this) ==> ($Heap[$o, $ownerRef] != this)));
  free requires (($Heap[this, $ownerRef] == this) && ($Heap[this, $ownerFrame] == $PeerGroupPlaceholder));
  free requires (forall $o : ref :: ((($Heap[$o, $ownerRef] == $Heap[this, $ownerRef]) && ($Heap[$o, $ownerFrame] == $Heap[this, $ownerFrame])) ==> ($o == this)));
  free requires ($BeingConstructed == this);
  modifies $Heap;
  ensures ((((($Heap[this, $ownerFrame] == $PeerGroupPlaceholder) || !($Heap[$Heap[this, $ownerRef], $inv] <: $Heap[this, $ownerFrame])) || ($Heap[$Heap[this, $ownerRef], $localinv] == $BaseClass($Heap[this, $ownerFrame]))) && ($Heap[this, $inv] == Bag)) && ($Heap[this, $localinv] == $typeof(this)));
  ensures (($Heap[this, $ownerRef] == old($Heap)[this, $ownerRef]) && ($Heap[this, $ownerFrame] == old($Heap)[this, $ownerFrame]));
  ensures ($Heap[this, $sharingMode] == $SharingMode_Unshared);
  free ensures (forall $o : ref :: (((($o != null) && (old($Heap)[$o, $allocated] != true)) && ($Heap[$o, $allocated] == true)) ==> (($Heap[$o, $inv] == $typeof($o)) && ($Heap[$o, $localinv] == $typeof($o)))));
  free ensures (forall $o : ref :: {$Heap[$o, $FirstConsistentOwner]} ((old($Heap)[old($Heap)[$o, $FirstConsistentOwner], $exposeVersion] == $Heap[old($Heap)[$o, $FirstConsistentOwner], $exposeVersion]) ==> (old($Heap)[$o, $FirstConsistentOwner] == $Heap[$o, $FirstConsistentOwner])));
  ensures (forall $o : ref :: ((($o != null) && (old($Heap)[$o, $allocated] == true)) ==> ((old($Heap)[$o, $ownerRef] == $Heap[$o, $ownerRef]) && (old($Heap)[$o, $ownerFrame] == $Heap[$o, $ownerFrame]))));
  free ensures (forall $o : ref, $f : name :: {$Heap[$o, $f]} (((((((((($f != $inv) && ($f != $localinv)) && ($f != $FirstConsistentOwner)) && (!IsStaticField($f) || !IsDirectlyModifiableField($f))) && ($o != null)) && (old($Heap)[$o, $allocated] == true)) && (((old($Heap)[$o, $ownerFrame] == $PeerGroupPlaceholder) || !(old($Heap)[old($Heap)[$o, $ownerRef], $inv] <: old($Heap)[$o, $ownerFrame])) || (old($Heap)[old($Heap)[$o, $ownerRef], $localinv] == $BaseClass(old($Heap)[$o, $ownerFrame])))) && (($o != this) || !(Bag <: DeclType($f)))) && old(true)) ==> (old($Heap)[$o, $f] == $Heap[$o, $f])));
  free ensures (forall $o : ref :: ((($o == this) || ((old($Heap)[$o, $inv] == $Heap[$o, $inv]) && (old($Heap)[$o, $localinv] == $Heap[$o, $localinv]))) || (old($Heap)[$o, $allocated] != true)));
  free ensures (((forall $o : ref :: ((old($Heap)[$o, $allocated] == true) ==> ($Heap[$o, $allocated] == true))) && (forall $ot : ref :: (((old($Heap)[$ot, $allocated] == true) && (old($Heap)[$ot, $ownerFrame] != $PeerGroupPlaceholder)) ==> (($Heap[$ot, $ownerRef] == old($Heap)[$ot, $ownerRef]) && ($Heap[$ot, $ownerFrame] == old($Heap)[$ot, $ownerFrame]))))) && (old($Heap)[$BeingConstructed, $NonNullFieldsAreInitialized] == $Heap[$BeingConstructed, $NonNullFieldsAreInitialized]));
  free ensures (forall $o : ref :: (($o == this) || (old($Heap[$o, $sharingMode]) == $Heap[$o, $sharingMode])));
  

implementation Bag..ctor$System.Int32.array$notnull$System.Int32$System.Int32(this : ref, initialElements$in : ref, start$in : int, howMany$in : int) {
  var initialElements : ref where $IsNotNull(initialElements, ValueArray(System.Int32, 1));
  var start : int where InRange(start, System.Int32);
  var howMany : int where InRange(howMany, System.Int32);
  var stack0i : int;
  var e : ref where $Is(e, ValueArray(System.Int32, 1));
  var stack0o : ref;
  var stack1i : int;
  var stack2o : ref;
  var stack3i : int;
  var stack4i : int;
  var temp0 : ref;
  entry: assume $IsNotNull(this, Bag); goto $$entry~l;
  $$entry~l: assume ($Heap[this, $allocated] == true); goto $$entry~k;
  $$entry~k: assume ((((($Heap[this, $ownerFrame] == $PeerGroupPlaceholder) || !($Heap[$Heap[this, $ownerRef], $inv] <: $Heap[this, $ownerFrame])) || ($Heap[$Heap[this, $ownerRef], $localinv] == $BaseClass($Heap[this, $ownerFrame]))) && ($Heap[this, $inv] == System.Object)) && ($Heap[this, $localinv] == $typeof(this))); goto $$entry~j;
  $$entry~j: initialElements := initialElements$in; goto $$entry~i;
  $$entry~i: start := start$in; goto $$entry~h;
  $$entry~h: howMany := howMany$in; goto $$entry~g;
  $$entry~g: assume ($Heap[this, Bag.count] == 0); goto block7531;
  block7531: goto block7956;
  block7956: goto block7973;
  block7973: goto block7990;
  block7990: goto block8007;
  block8007: goto block8024;
  block8024: assert (this != null); goto $$block8024~c;
  $$block8024~c: assert (!($Heap[this, $inv] <: Bag) || ($Heap[this, $localinv] == System.Object)); goto $$block8024~b;
  $$block8024~b: $Heap := $Heap[this, Bag.count := howMany]; goto $$block8024~a;
  $$block8024~a: assume IsHeap($Heap); goto block8041;
  block8041: stack0i := howMany; goto $$block8041~i;
  $$block8041~i: assert (0 <= stack0i); goto $$block8041~h;
  $$block8041~h: havoc e; goto $$block8041~g;
  $$block8041~g: assume (($Heap[e, $allocated] == false) && ($Length(e) == stack0i)); goto $$block8041~f;
  $$block8041~f: assume $IsNotNull(e, ValueArray(System.Int32, 1)); goto $$block8041~e;
  $$block8041~e: assume (($Heap[e, $ownerRef] == e) && ($Heap[e, $ownerFrame] == $PeerGroupPlaceholder)); goto $$block8041~d;
  $$block8041~d: assume ((($Heap[e, $inv] == ValueArray(System.Int32, 1)) && ($Heap[e, $localinv] == ValueArray(System.Int32, 1))) && ((($Heap[e, $ownerFrame] == $PeerGroupPlaceholder) || !($Heap[$Heap[e, $ownerRef], $inv] <: $Heap[e, $ownerFrame])) || ($Heap[$Heap[e, $ownerRef], $localinv] == $BaseClass($Heap[e, $ownerFrame])))); goto $$block8041~c;
  $$block8041~c: assume (forall $i : int :: (ValueArrayGet($Heap[e, $elements], $i) == 0)); goto $$block8041~b;
  $$block8041~b: $Heap := $Heap[e, $allocated := true]; goto $$block8041~a;
  $$block8041~a: assume IsHeap($Heap); goto block8058;
  block8058: stack0o := initialElements; goto $$block8058~p;
  $$block8058~p: stack1i := start; goto $$block8058~o;
  $$block8058~o: stack2o := e; goto $$block8058~n;
  $$block8058~n: assert (stack2o != null); goto $$block8058~m;
  $$block8058~m: stack2o := stack2o; goto $$block8058~l;
  $$block8058~l: stack3i := 0; goto $$block8058~k;
  $$block8058~k: stack4i := howMany; goto $$block8058~j;
  $$block8058~j: call System.Array.Copy$System.Array$notnull$System.Int32$System.Array$notnull$System.Int32$System.Int32(stack0o, stack1i, stack2o, stack3i, stack4i); goto $$block8058~i;
  $$block8058~i: stack0o := e; goto $$block8058~h;
  $$block8058~h: assert (stack0o != null); goto $$block8058~g;
  $$block8058~g: stack0o := stack0o; goto $$block8058~f;
  $$block8058~f: assert (this != null); goto $$block8058~e;
  $$block8058~e: assert (!($Heap[this, $inv] <: Bag) || ($Heap[this, $localinv] == System.Object)); goto $$block8058~d;
  $$block8058~d: assert (($Heap[stack0o, $ownerFrame] == $PeerGroupPlaceholder) || (($Heap[stack0o, $ownerRef] == this) && ($Heap[stack0o, $ownerFrame] == Bag))); goto $$block8058~c;
  $$block8058~c: $Heap := $Heap[this, Bag.elems := stack0o]; goto $$block8058~b;
  $$block8058~b: call $UpdateOwnersForRep(this, Bag, stack0o); goto $$block8058~a;
  $$block8058~a: assume IsHeap($Heap); goto block8075;
  block8075: assert (this != null); goto $$block8075~a;
  $$block8075~a: call System.Object..ctor(this); goto block8194;
  block8194: goto block8211;
  block8211: goto block8228;
  block8228: goto block8245;
  block8245: temp0 := this; goto $$block8245~f;
  $$block8245~f: assert (temp0 != null); goto $$block8245~e;
  $$block8245~e: assert (($Heap[temp0, $inv] == System.Object) && ($Heap[temp0, $localinv] == $typeof(temp0))); goto $$block8245~d;
  $$block8245~d: assert ((0 <= $Heap[temp0, Bag.count]) && ($Heap[temp0, Bag.count] <= $Length($Heap[temp0, Bag.elems]))); goto $$block8245~c;
  $$block8245~c: assert (forall $p : ref :: ((((($p != null) && ($Heap[$p, $allocated] == true)) && ($Heap[$p, $ownerRef] == temp0)) && ($Heap[$p, $ownerFrame] == Bag)) ==> (($Heap[$p, $inv] == $typeof($p)) && ($Heap[$p, $localinv] == $typeof($p))))); goto $$block8245~b;
  $$block8245~b: $Heap := $Heap[temp0, $inv := Bag]; goto $$block8245~a;
  $$block8245~a: assume IsHeap($Heap); return;
  
}

procedure Bag.RemoveMin(this : ref) returns ($result : int where InRange($result, System.Int32));
  requires (0 < $Heap[this, Bag.count]);
  requires (((($Heap[this, $ownerFrame] == $PeerGroupPlaceholder) || !($Heap[$Heap[this, $ownerRef], $inv] <: $Heap[this, $ownerFrame])) || ($Heap[$Heap[this, $ownerRef], $localinv] == $BaseClass($Heap[this, $ownerFrame]))) && (forall $pc : ref :: ((((($pc != null) && ($Heap[$pc, $allocated] == true)) && ($Heap[$pc, $ownerRef] == $Heap[this, $ownerRef])) && ($Heap[$pc, $ownerFrame] == $Heap[this, $ownerFrame])) ==> (($Heap[$pc, $inv] == $typeof($pc)) && ($Heap[$pc, $localinv] == $typeof($pc))))));
  free requires ($BeingConstructed == null);
  modifies $Heap;
  free ensures true;
  free ensures InRange($result, System.Int32);
  free ensures (forall $o : ref :: (((($o != null) && (old($Heap)[$o, $allocated] != true)) && ($Heap[$o, $allocated] == true)) ==> (($Heap[$o, $inv] == $typeof($o)) && ($Heap[$o, $localinv] == $typeof($o)))));
  free ensures (forall $o : ref :: {$Heap[$o, $FirstConsistentOwner]} ((old($Heap)[old($Heap)[$o, $FirstConsistentOwner], $exposeVersion] == $Heap[old($Heap)[$o, $FirstConsistentOwner], $exposeVersion]) ==> (old($Heap)[$o, $FirstConsistentOwner] == $Heap[$o, $FirstConsistentOwner])));
  ensures (forall $o : ref :: ((($o != null) && (old($Heap)[$o, $allocated] == true)) ==> ((old($Heap)[$o, $ownerRef] == $Heap[$o, $ownerRef]) && (old($Heap)[$o, $ownerFrame] == $Heap[$o, $ownerFrame]))));
  free ensures (forall $o : ref, $f : name :: {$Heap[$o, $f]} (((((((((($f != $inv) && ($f != $localinv)) && ($f != $FirstConsistentOwner)) && (!IsStaticField($f) || !IsDirectlyModifiableField($f))) && ($o != null)) && (old($Heap)[$o, $allocated] == true)) && (((old($Heap)[$o, $ownerFrame] == $PeerGroupPlaceholder) || !(old($Heap)[old($Heap)[$o, $ownerRef], $inv] <: old($Heap)[$o, $ownerFrame])) || (old($Heap)[old($Heap)[$o, $ownerRef], $localinv] == $BaseClass(old($Heap)[$o, $ownerFrame])))) && old(true)) && old((($o != this) || ($f != $exposeVersion)))) ==> (old($Heap)[$o, $f] == $Heap[$o, $f])));
  free ensures (forall $o : ref :: (((old($Heap)[$o, $inv] == $Heap[$o, $inv]) && (old($Heap)[$o, $localinv] == $Heap[$o, $localinv])) || (old($Heap)[$o, $allocated] != true)));
  free ensures (((forall $o : ref :: ((old($Heap)[$o, $allocated] == true) ==> ($Heap[$o, $allocated] == true))) && (forall $ot : ref :: (((old($Heap)[$ot, $allocated] == true) && (old($Heap)[$ot, $ownerFrame] != $PeerGroupPlaceholder)) ==> (($Heap[$ot, $ownerRef] == old($Heap)[$ot, $ownerRef]) && ($Heap[$ot, $ownerFrame] == old($Heap)[$ot, $ownerFrame]))))) && (old($Heap)[$BeingConstructed, $NonNullFieldsAreInitialized] == $Heap[$BeingConstructed, $NonNullFieldsAreInitialized]));
  free ensures (forall $o : ref :: (old($Heap[$o, $sharingMode]) == $Heap[$o, $sharingMode]));
  

implementation Bag.RemoveMin(this : ref) returns ($result : int) {
  var temp0 : ref;
  var stack1s : struct;
  var stack1o : ref;
  var temp1 : exposeVersionType;
  var local11220 : ref where $Is(local11220, System.Exception);
  var m : int where InRange(m, System.Int32);
  var mindex : int where InRange(mindex, System.Int32);
  var i : int where InRange(i, System.Int32);
  var stack0o : ref;
  var stack0i : int;
  var stack0b : bool;
  var stack1i : int;
  var local11305 : int where InRange(local11305, System.Int32);
  var stack2o : ref;
  var stack3i : int;
  var stack2i : int;
  var local11356 : int where InRange(local11356, System.Int32);
  var return.value : int where InRange(return.value, System.Int32);
  var stack0s : struct;
  var SS$Display.Return.Local : int where InRange(SS$Display.Return.Local, System.Int32);
  var $Heap$block10064$LoopPreheader : <x>[ref, name]x;
  entry: assume $IsNotNull(this, Bag); goto $$entry~m;
  $$entry~m: assume ($Heap[this, $allocated] == true); goto block9622;
  block9622: goto block9979;
  block9979: goto block9996;
  block9996: temp0 := this; goto $$block9996~j;
  $$block9996~j: havoc stack1s; goto $$block9996~i;
  $$block9996~i: assume $IsTokenForType(stack1s, Bag); goto $$block9996~h;
  $$block9996~h: stack1o := TypeObject(Bag); goto $$block9996~g;
  $$block9996~g: assert (temp0 != null); goto $$block9996~f;
  $$block9996~f: assert ((((($Heap[temp0, $ownerFrame] == $PeerGroupPlaceholder) || !($Heap[$Heap[temp0, $ownerRef], $inv] <: $Heap[temp0, $ownerFrame])) || ($Heap[$Heap[temp0, $ownerRef], $localinv] == $BaseClass($Heap[temp0, $ownerFrame]))) && ($Heap[temp0, $inv] <: Bag)) && ($Heap[temp0, $localinv] == $typeof(temp0))); goto $$block9996~e;
  $$block9996~e: $Heap := $Heap[temp0, $localinv := System.Object]; goto $$block9996~d;
  $$block9996~d: havoc temp1; goto $$block9996~c;
  $$block9996~c: $Heap := $Heap[temp0, $exposeVersion := temp1]; goto $$block9996~b;
  $$block9996~b: assume IsHeap($Heap); goto $$block9996~a;
  $$block9996~a: local11220 := null; goto block10013;
  block10013: m := int#2147483647; goto block10030;
  block10030: mindex := 0; goto block10047;
  block10047: i := 0; goto block10064$LoopPreheader;
  block10064: assume (((forall $o : ref :: (($Heap$block10064$LoopPreheader[$o, $allocated] == true) ==> ($Heap[$o, $allocated] == true))) && (forall $ot : ref :: ((($Heap$block10064$LoopPreheader[$ot, $allocated] == true) && ($Heap$block10064$LoopPreheader[$ot, $ownerFrame] != $PeerGroupPlaceholder)) ==> (($Heap[$ot, $ownerRef] == $Heap$block10064$LoopPreheader[$ot, $ownerRef]) && ($Heap[$ot, $ownerFrame] == $Heap$block10064$LoopPreheader[$ot, $ownerFrame]))))) && ($Heap$block10064$LoopPreheader[$BeingConstructed, $NonNullFieldsAreInitialized] == $Heap[$BeingConstructed, $NonNullFieldsAreInitialized])); goto $$block10064~d;
  $$block10064~d: assume (forall $o : ref :: ((($Heap$block10064$LoopPreheader[$o, $inv] == $Heap[$o, $inv]) && ($Heap$block10064$LoopPreheader[$o, $localinv] == $Heap[$o, $localinv])) || ($Heap$block10064$LoopPreheader[$o, $allocated] != true))); goto $$block10064~c;
  $$block10064~c: assume (forall $o : ref :: ((($Heap$block10064$LoopPreheader[$o, $allocated] != true) && ($Heap[$o, $allocated] == true)) ==> (($Heap[$o, $inv] == $typeof($o)) && ($Heap[$o, $localinv] == $typeof($o))))); goto $$block10064~b;
  $$block10064~b: assert (forall $o : ref :: ((($o != null) && ($Heap$block10064$LoopPreheader[$o, $allocated] == true)) ==> (($Heap$block10064$LoopPreheader[$o, $ownerRef] == $Heap[$o, $ownerRef]) && ($Heap$block10064$LoopPreheader[$o, $ownerFrame] == $Heap[$o, $ownerFrame])))); goto $$block10064~a;
  $$block10064~a: assert ((((0 <= i) && (i <= $Heap[this, Bag.count])) && (0 <= mindex)) && (mindex < $Heap[this, Bag.count])); goto block10302;
  block10302: goto block10319;
  block10319: assert (this != null); goto $$block10319~a;
  $$block10319~a: stack0i := $Heap[this, Bag.count]; goto true10319to10455, false10319to10336;
  true10319to10455: assume (i == stack0i); goto block10455;
  false10319to10336: assume (i != stack0i); goto block10336;
  block10455: goto block10472;
  block10336: assert (this != null); goto $$block10336~f;
  $$block10336~f: stack0o := $Heap[this, Bag.elems]; goto $$block10336~e;
  $$block10336~e: stack1i := i; goto $$block10336~d;
  $$block10336~d: assert (stack0o != null); goto $$block10336~c;
  $$block10336~c: assert (0 <= stack1i); goto $$block10336~b;
  $$block10336~b: assert (stack1i < $Length(stack0o)); goto $$block10336~a;
  $$block10336~a: stack0i := ValueArrayGet($Heap[stack0o, $elements], stack1i); goto true10336to10370, false10336to10353;
  true10336to10370: assume (stack0i >= m); goto block10370;
  false10336to10353: assume (stack0i < m); goto block10353;
  block10370: goto block10387;
  block10353: mindex := i; goto $$block10353~g;
  $$block10353~g: assert (this != null); goto $$block10353~f;
  $$block10353~f: stack0o := $Heap[this, Bag.elems]; goto $$block10353~e;
  $$block10353~e: stack1i := i; goto $$block10353~d;
  $$block10353~d: assert (stack0o != null); goto $$block10353~c;
  $$block10353~c: assert (0 <= stack1i); goto $$block10353~b;
  $$block10353~b: assert (stack1i < $Length(stack0o)); goto $$block10353~a;
  $$block10353~a: m := ValueArrayGet($Heap[stack0o, $elements], stack1i); goto block10370;
  block10472: assert (this != null); goto $$block10472~h;
  $$block10472~h: local11305 := $Heap[this, Bag.count]; goto $$block10472~g;
  $$block10472~g: stack0i := 1; goto $$block10472~f;
  $$block10472~f: stack0i := (local11305 - stack0i); goto $$block10472~e;
  $$block10472~e: assert (this != null); goto $$block10472~d;
  $$block10472~d: assert (!($Heap[this, $inv] <: Bag) || ($Heap[this, $localinv] == System.Object)); goto $$block10472~c;
  $$block10472~c: $Heap := $Heap[this, Bag.count := stack0i]; goto $$block10472~b;
  $$block10472~b: assume IsHeap($Heap); goto $$block10472~a;
  $$block10472~a: stack0i := local11305; goto block10489;
  block10387: goto block10404;
  block10489: assert (this != null); goto $$block10489~o;
  $$block10489~o: stack0o := $Heap[this, Bag.elems]; goto $$block10489~n;
  $$block10489~n: stack1i := mindex; goto $$block10489~m;
  $$block10489~m: assert (this != null); goto $$block10489~l;
  $$block10489~l: stack2o := $Heap[this, Bag.elems]; goto $$block10489~k;
  $$block10489~k: assert (this != null); goto $$block10489~j;
  $$block10489~j: stack3i := $Heap[this, Bag.count]; goto $$block10489~i;
  $$block10489~i: assert (stack2o != null); goto $$block10489~h;
  $$block10489~h: assert (0 <= stack3i); goto $$block10489~g;
  $$block10489~g: assert (stack3i < $Length(stack2o)); goto $$block10489~f;
  $$block10489~f: stack2i := ValueArrayGet($Heap[stack2o, $elements], stack3i); goto $$block10489~e;
  $$block10489~e: assert (stack0o != null); goto $$block10489~d;
  $$block10489~d: assert (0 <= stack1i); goto $$block10489~c;
  $$block10489~c: assert (stack1i < $Length(stack0o)); goto $$block10489~b;
  $$block10489~b: $Heap := $Heap[stack0o, $elements := ValueArraySet($Heap[stack0o, $elements], stack1i, stack2i)]; goto $$block10489~a;
  $$block10489~a: assume IsHeap($Heap); goto block10506;
  block10404: local11356 := i; goto $$block10404~d;
  $$block10404~d: stack0i := 1; goto $$block10404~c;
  $$block10404~c: stack0i := (local11356 + stack0i); goto $$block10404~b;
  $$block10404~b: i := stack0i; goto $$block10404~a;
  $$block10404~a: stack0i := local11356; goto block10421;
  block10506: return.value := m; goto block10693;
  block10421: goto block10438;
  block10693: stack0o := null; goto true10693to10795, false10693to10710;
  true10693to10795: assume (local11220 == stack0o); goto block10795;
  false10693to10710: assume (local11220 != stack0o); goto block10710;
  block10795: goto block10812;
  block10710: goto true10710to10795, false10710to10727;
  block10438: goto block10064;
  true10710to10795: assume ($As(local11220, Microsoft.Contracts.ICheckedException) != null); goto block10795;
  false10710to10727: assume ($As(local11220, Microsoft.Contracts.ICheckedException) == null); goto block10727;
  block10727: goto block10744;
  block10812: havoc stack0s; goto $$block10812~h;
  $$block10812~h: assume $IsTokenForType(stack0s, Bag); goto $$block10812~g;
  $$block10812~g: stack0o := TypeObject(Bag); goto $$block10812~f;
  $$block10812~f: assert (temp0 != null); goto $$block10812~e;
  $$block10812~e: assert ($Heap[temp0, $localinv] == System.Object); goto $$block10812~d;
  $$block10812~d: assert ((0 <= $Heap[temp0, Bag.count]) && ($Heap[temp0, Bag.count] <= $Length($Heap[temp0, Bag.elems]))); goto $$block10812~c;
  $$block10812~c: assert (forall $p : ref :: ((((($p != null) && ($Heap[$p, $allocated] == true)) && ($Heap[$p, $ownerRef] == temp0)) && ($Heap[$p, $ownerFrame] == Bag)) ==> (($Heap[$p, $inv] == $typeof($p)) && ($Heap[$p, $localinv] == $typeof($p))))); goto $$block10812~b;
  $$block10812~b: $Heap := $Heap[temp0, $localinv := $typeof(temp0)]; goto $$block10812~a;
  $$block10812~a: assume IsHeap($Heap); goto block10744;
  block10744: goto block10761;
  block10761: goto block10778;
  block10778: goto block10659;
  block10659: goto block10676;
  block10676: SS$Display.Return.Local := return.value; goto $$block10676~b;
  $$block10676~b: stack0i := return.value; goto $$block10676~a;
  $$block10676~a: $result := stack0i; return;
  block10064$LoopPreheader: $Heap$block10064$LoopPreheader := $Heap; goto block10064;
  
}

axiom (System.Type <: System.Type);
axiom (System.Reflection.MemberInfo <: System.Reflection.MemberInfo);
axiom ($BaseClass(System.Reflection.MemberInfo) == System.Object);
axiom ((System.Reflection.MemberInfo <: $BaseClass(System.Reflection.MemberInfo)) && (AsDirectSubClass(System.Reflection.MemberInfo, $BaseClass(System.Reflection.MemberInfo)) == System.Reflection.MemberInfo));
axiom ($IsImmutable(System.Reflection.MemberInfo) && ($AsImmutable(System.Reflection.MemberInfo) == System.Reflection.MemberInfo));
axiom (System.Reflection.ICustomAttributeProvider <: System.Object);
axiom $IsMemberlessType(System.Reflection.ICustomAttributeProvider);
axiom (System.Reflection.MemberInfo <: System.Reflection.ICustomAttributeProvider);
axiom (System.Runtime.InteropServices._MemberInfo <: System.Object);
axiom $IsMemberlessType(System.Runtime.InteropServices._MemberInfo);
axiom (System.Reflection.MemberInfo <: System.Runtime.InteropServices._MemberInfo);
axiom $IsMemberlessType(System.Reflection.MemberInfo);
axiom ($BaseClass(System.Type) == System.Reflection.MemberInfo);
axiom ((System.Type <: $BaseClass(System.Type)) && (AsDirectSubClass(System.Type, $BaseClass(System.Type)) == System.Type));
axiom ($IsImmutable(System.Type) && ($AsImmutable(System.Type) == System.Type));
axiom (System.Runtime.InteropServices._Type <: System.Object);
axiom $IsMemberlessType(System.Runtime.InteropServices._Type);
axiom (System.Type <: System.Runtime.InteropServices._Type);
axiom (System.Reflection.IReflect <: System.Object);
axiom $IsMemberlessType(System.Reflection.IReflect);
axiom (System.Type <: System.Reflection.IReflect);
axiom $IsMemberlessType(System.Type);
axiom (System.String <: System.String);
axiom ($BaseClass(System.String) == System.Object);
axiom ((System.String <: $BaseClass(System.String)) && (AsDirectSubClass(System.String, $BaseClass(System.String)) == System.String));
axiom ($IsImmutable(System.String) && ($AsImmutable(System.String) == System.String));
axiom (System.IComparable <: System.Object);
axiom $IsMemberlessType(System.IComparable);
axiom (System.String <: System.IComparable);
axiom (System.String <: System.ICloneable);
axiom (System.IConvertible <: System.Object);
axiom $IsMemberlessType(System.IConvertible);
axiom (System.String <: System.IConvertible);
axiom (System.IComparable`1...System.String <: System.Object);
axiom $IsMemberlessType(System.IComparable`1...System.String);
axiom (System.String <: System.IComparable`1...System.String);
axiom (System.Collections.Generic.IEnumerable`1...System.Char <: System.Object);
axiom (System.Collections.Generic.IEnumerable`1...System.Char <: System.Collections.IEnumerable);
axiom $IsMemberlessType(System.Collections.Generic.IEnumerable`1...System.Char);
axiom (System.String <: System.Collections.Generic.IEnumerable`1...System.Char);
axiom (System.String <: System.Collections.IEnumerable);
axiom (System.IEquatable`1...System.String <: System.Object);
axiom $IsMemberlessType(System.IEquatable`1...System.String);
axiom (System.String <: System.IEquatable`1...System.String);
axiom (forall $U : name :: {($U <: System.String)} (($U <: System.String) ==> ($U == System.String)));
axiom (Microsoft.Contracts.ICheckedException <: System.Object);
axiom $IsMemberlessType(Microsoft.Contracts.ICheckedException);
procedure Bag.Add$System.Int32(this : ref, x$in : int where InRange(x$in, System.Int32));
  free requires true;
  requires (((($Heap[this, $ownerFrame] == $PeerGroupPlaceholder) || !($Heap[$Heap[this, $ownerRef], $inv] <: $Heap[this, $ownerFrame])) || ($Heap[$Heap[this, $ownerRef], $localinv] == $BaseClass($Heap[this, $ownerFrame]))) && (forall $pc : ref :: ((((($pc != null) && ($Heap[$pc, $allocated] == true)) && ($Heap[$pc, $ownerRef] == $Heap[this, $ownerRef])) && ($Heap[$pc, $ownerFrame] == $Heap[this, $ownerFrame])) ==> (($Heap[$pc, $inv] == $typeof($pc)) && ($Heap[$pc, $localinv] == $typeof($pc))))));
  free requires ($BeingConstructed == null);
  modifies $Heap;
  free ensures (forall $o : ref :: (((($o != null) && (old($Heap)[$o, $allocated] != true)) && ($Heap[$o, $allocated] == true)) ==> (($Heap[$o, $inv] == $typeof($o)) && ($Heap[$o, $localinv] == $typeof($o)))));
  free ensures (forall $o : ref :: {$Heap[$o, $FirstConsistentOwner]} ((old($Heap)[old($Heap)[$o, $FirstConsistentOwner], $exposeVersion] == $Heap[old($Heap)[$o, $FirstConsistentOwner], $exposeVersion]) ==> (old($Heap)[$o, $FirstConsistentOwner] == $Heap[$o, $FirstConsistentOwner])));
  ensures (forall $o : ref :: ((($o != null) && (old($Heap)[$o, $allocated] == true)) ==> ((old($Heap)[$o, $ownerRef] == $Heap[$o, $ownerRef]) && (old($Heap)[$o, $ownerFrame] == $Heap[$o, $ownerFrame]))));
  free ensures (forall $o : ref, $f : name :: {$Heap[$o, $f]} (((((((((($f != $inv) && ($f != $localinv)) && ($f != $FirstConsistentOwner)) && (!IsStaticField($f) || !IsDirectlyModifiableField($f))) && ($o != null)) && (old($Heap)[$o, $allocated] == true)) && (((old($Heap)[$o, $ownerFrame] == $PeerGroupPlaceholder) || !(old($Heap)[old($Heap)[$o, $ownerRef], $inv] <: old($Heap)[$o, $ownerFrame])) || (old($Heap)[old($Heap)[$o, $ownerRef], $localinv] == $BaseClass(old($Heap)[$o, $ownerFrame])))) && old(true)) && old((($o != this) || ($f != $exposeVersion)))) ==> (old($Heap)[$o, $f] == $Heap[$o, $f])));
  free ensures (forall $o : ref :: (((old($Heap)[$o, $inv] == $Heap[$o, $inv]) && (old($Heap)[$o, $localinv] == $Heap[$o, $localinv])) || (old($Heap)[$o, $allocated] != true)));
  free ensures (((forall $o : ref :: ((old($Heap)[$o, $allocated] == true) ==> ($Heap[$o, $allocated] == true))) && (forall $ot : ref :: (((old($Heap)[$ot, $allocated] == true) && (old($Heap)[$ot, $ownerFrame] != $PeerGroupPlaceholder)) ==> (($Heap[$ot, $ownerRef] == old($Heap)[$ot, $ownerRef]) && ($Heap[$ot, $ownerFrame] == old($Heap)[$ot, $ownerFrame]))))) && (old($Heap)[$BeingConstructed, $NonNullFieldsAreInitialized] == $Heap[$BeingConstructed, $NonNullFieldsAreInitialized]));
  free ensures (forall $o : ref :: (old($Heap[$o, $sharingMode]) == $Heap[$o, $sharingMode]));
  

implementation Bag.Add$System.Int32(this : ref, x$in : int) {
  var x : int where InRange(x, System.Int32);
  var temp0 : ref;
  var stack1s : struct;
  var stack1o : ref;
  var temp1 : exposeVersionType;
  var local13090 : ref where $Is(local13090, System.Exception);
  var stack0i : int;
  var stack1i : int;
  var stack0b : bool;
  var b : ref where $IsNotNull(b, ValueArray(System.Int32, 1));
  var stack0o : ref;
  var stack2o : ref;
  var stack3i : int;
  var stack4o : ref;
  var stack4i : int;
  var local13124 : int where InRange(local13124, System.Int32);
  var stack0s : struct;
  entry: assume $IsNotNull(this, Bag); goto $$entry~o;
  $$entry~o: assume ($Heap[this, $allocated] == true); goto $$entry~n;
  $$entry~n: x := x$in; goto block12121;
  block12121: goto block12376;
  block12376: goto block12393;
  block12393: temp0 := this; goto $$block12393~j;
  $$block12393~j: havoc stack1s; goto $$block12393~i;
  $$block12393~i: assume $IsTokenForType(stack1s, Bag); goto $$block12393~h;
  $$block12393~h: stack1o := TypeObject(Bag); goto $$block12393~g;
  $$block12393~g: assert (temp0 != null); goto $$block12393~f;
  $$block12393~f: assert ((((($Heap[temp0, $ownerFrame] == $PeerGroupPlaceholder) || !($Heap[$Heap[temp0, $ownerRef], $inv] <: $Heap[temp0, $ownerFrame])) || ($Heap[$Heap[temp0, $ownerRef], $localinv] == $BaseClass($Heap[temp0, $ownerFrame]))) && ($Heap[temp0, $inv] <: Bag)) && ($Heap[temp0, $localinv] == $typeof(temp0))); goto $$block12393~e;
  $$block12393~e: $Heap := $Heap[temp0, $localinv := System.Object]; goto $$block12393~d;
  $$block12393~d: havoc temp1; goto $$block12393~c;
  $$block12393~c: $Heap := $Heap[temp0, $exposeVersion := temp1]; goto $$block12393~b;
  $$block12393~b: assume IsHeap($Heap); goto $$block12393~a;
  $$block12393~a: local13090 := null; goto block12410;
  block12410: assert (this != null); goto $$block12410~e;
  $$block12410~e: stack0i := $Heap[this, Bag.count]; goto $$block12410~d;
  $$block12410~d: assert (this != null); goto $$block12410~c;
  $$block12410~c: stack1o := $Heap[this, Bag.elems]; goto $$block12410~b;
  $$block12410~b: assert (stack1o != null); goto $$block12410~a;
  $$block12410~a: stack1i := $Length(stack1o); goto true12410to12461, false12410to12427;
  true12410to12461: assume (stack0i != stack1i); goto block12461;
  false12410to12427: assume (stack0i == stack1i); goto block12427;
  block12461: goto block12478;
  block12427: stack0i := 2; goto $$block12427~n;
  $$block12427~n: assert (this != null); goto $$block12427~m;
  $$block12427~m: stack1o := $Heap[this, Bag.elems]; goto $$block12427~l;
  $$block12427~l: assert (stack1o != null); goto $$block12427~k;
  $$block12427~k: stack1i := $Length(stack1o); goto $$block12427~j;
  $$block12427~j: stack0i := (stack0i * stack1i); goto $$block12427~i;
  $$block12427~i: assert (0 <= stack0i); goto $$block12427~h;
  $$block12427~h: havoc b; goto $$block12427~g;
  $$block12427~g: assume (($Heap[b, $allocated] == false) && ($Length(b) == stack0i)); goto $$block12427~f;
  $$block12427~f: assume $IsNotNull(b, ValueArray(System.Int32, 1)); goto $$block12427~e;
  $$block12427~e: assume (($Heap[b, $ownerRef] == b) && ($Heap[b, $ownerFrame] == $PeerGroupPlaceholder)); goto $$block12427~d;
  $$block12427~d: assume ((($Heap[b, $inv] == ValueArray(System.Int32, 1)) && ($Heap[b, $localinv] == ValueArray(System.Int32, 1))) && ((($Heap[b, $ownerFrame] == $PeerGroupPlaceholder) || !($Heap[$Heap[b, $ownerRef], $inv] <: $Heap[b, $ownerFrame])) || ($Heap[$Heap[b, $ownerRef], $localinv] == $BaseClass($Heap[b, $ownerFrame])))); goto $$block12427~c;
  $$block12427~c: assume (forall $i : int :: (ValueArrayGet($Heap[b, $elements], $i) == 0)); goto $$block12427~b;
  $$block12427~b: $Heap := $Heap[b, $allocated := true]; goto $$block12427~a;
  $$block12427~a: assume IsHeap($Heap); goto block12444;
  block12478: goto block12495;
  block12444: assert (this != null); goto $$block12444~o;
  $$block12444~o: stack0o := $Heap[this, Bag.elems]; goto $$block12444~n;
  $$block12444~n: stack1i := 0; goto $$block12444~m;
  $$block12444~m: stack2o := b; goto $$block12444~l;
  $$block12444~l: stack3i := 0; goto $$block12444~k;
  $$block12444~k: assert (this != null); goto $$block12444~j;
  $$block12444~j: stack4o := $Heap[this, Bag.elems]; goto $$block12444~i;
  $$block12444~i: assert (stack4o != null); goto $$block12444~h;
  $$block12444~h: stack4i := $Length(stack4o); goto $$block12444~g;
  $$block12444~g: call System.Array.Copy$System.Array$notnull$System.Int32$System.Array$notnull$System.Int32$System.Int32(stack0o, stack1i, stack2o, stack3i, stack4i); goto $$block12444~f;
  $$block12444~f: assert (this != null); goto $$block12444~e;
  $$block12444~e: assert (!($Heap[this, $inv] <: Bag) || ($Heap[this, $localinv] == System.Object)); goto $$block12444~d;
  $$block12444~d: assert (($Heap[b, $ownerFrame] == $PeerGroupPlaceholder) || (($Heap[b, $ownerRef] == this) && ($Heap[b, $ownerFrame] == Bag))); goto $$block12444~c;
  $$block12444~c: $Heap := $Heap[this, Bag.elems := b]; goto $$block12444~b;
  $$block12444~b: call $UpdateOwnersForRep(this, Bag, b); goto $$block12444~a;
  $$block12444~a: assume IsHeap($Heap); goto block12461;
  block12495: assert (this != null); goto $$block12495~h;
  $$block12495~h: stack0o := $Heap[this, Bag.elems]; goto $$block12495~g;
  $$block12495~g: assert (this != null); goto $$block12495~f;
  $$block12495~f: stack1i := $Heap[this, Bag.count]; goto $$block12495~e;
  $$block12495~e: assert (stack0o != null); goto $$block12495~d;
  $$block12495~d: assert (0 <= stack1i); goto $$block12495~c;
  $$block12495~c: assert (stack1i < $Length(stack0o)); goto $$block12495~b;
  $$block12495~b: $Heap := $Heap[stack0o, $elements := ValueArraySet($Heap[stack0o, $elements], stack1i, x)]; goto $$block12495~a;
  $$block12495~a: assume IsHeap($Heap); goto block12512;
  block12512: assert (this != null); goto $$block12512~h;
  $$block12512~h: local13124 := $Heap[this, Bag.count]; goto $$block12512~g;
  $$block12512~g: stack0i := 1; goto $$block12512~f;
  $$block12512~f: stack0i := (local13124 + stack0i); goto $$block12512~e;
  $$block12512~e: assert (this != null); goto $$block12512~d;
  $$block12512~d: assert (!($Heap[this, $inv] <: Bag) || ($Heap[this, $localinv] == System.Object)); goto $$block12512~c;
  $$block12512~c: $Heap := $Heap[this, Bag.count := stack0i]; goto $$block12512~b;
  $$block12512~b: assume IsHeap($Heap); goto $$block12512~a;
  $$block12512~a: stack0i := local13124; goto block12529;
  block12529: goto block12699;
  block12699: stack0o := null; goto true12699to12801, false12699to12716;
  true12699to12801: assume (local13090 == stack0o); goto block12801;
  false12699to12716: assume (local13090 != stack0o); goto block12716;
  block12801: goto block12818;
  block12716: goto true12716to12801, false12716to12733;
  true12716to12801: assume ($As(local13090, Microsoft.Contracts.ICheckedException) != null); goto block12801;
  false12716to12733: assume ($As(local13090, Microsoft.Contracts.ICheckedException) == null); goto block12733;
  block12733: goto block12750;
  block12818: havoc stack0s; goto $$block12818~h;
  $$block12818~h: assume $IsTokenForType(stack0s, Bag); goto $$block12818~g;
  $$block12818~g: stack0o := TypeObject(Bag); goto $$block12818~f;
  $$block12818~f: assert (temp0 != null); goto $$block12818~e;
  $$block12818~e: assert ($Heap[temp0, $localinv] == System.Object); goto $$block12818~d;
  $$block12818~d: assert ((0 <= $Heap[temp0, Bag.count]) && ($Heap[temp0, Bag.count] <= $Length($Heap[temp0, Bag.elems]))); goto $$block12818~c;
  $$block12818~c: assert (forall $p : ref :: ((((($p != null) && ($Heap[$p, $allocated] == true)) && ($Heap[$p, $ownerRef] == temp0)) && ($Heap[$p, $ownerFrame] == Bag)) ==> (($Heap[$p, $inv] == $typeof($p)) && ($Heap[$p, $localinv] == $typeof($p))))); goto $$block12818~b;
  $$block12818~b: $Heap := $Heap[temp0, $localinv := $typeof(temp0)]; goto $$block12818~a;
  $$block12818~a: assume IsHeap($Heap); goto block12750;
  block12750: goto block12767;
  block12767: goto block12784;
  block12784: goto block12648;
  block12648: goto block12665;
  block12665: goto block12682;
  block12682: return;
  
}

procedure Bag..cctor();
  free requires ($BeingConstructed == null);
  modifies $Heap;
  free ensures (forall $o : ref :: (((($o != null) && (old($Heap)[$o, $allocated] != true)) && ($Heap[$o, $allocated] == true)) ==> (($Heap[$o, $inv] == $typeof($o)) && ($Heap[$o, $localinv] == $typeof($o)))));
  free ensures (forall $o : ref :: {$Heap[$o, $FirstConsistentOwner]} ((old($Heap)[old($Heap)[$o, $FirstConsistentOwner], $exposeVersion] == $Heap[old($Heap)[$o, $FirstConsistentOwner], $exposeVersion]) ==> (old($Heap)[$o, $FirstConsistentOwner] == $Heap[$o, $FirstConsistentOwner])));
  ensures (forall $o : ref :: ((($o != null) && (old($Heap)[$o, $allocated] == true)) ==> ((old($Heap)[$o, $ownerRef] == $Heap[$o, $ownerRef]) && (old($Heap)[$o, $ownerFrame] == $Heap[$o, $ownerFrame]))));
  free ensures (forall $o : ref, $f : name :: {$Heap[$o, $f]} (((((((((($f != $inv) && ($f != $localinv)) && ($f != $FirstConsistentOwner)) && (!IsStaticField($f) || !IsDirectlyModifiableField($f))) && ($o != null)) && (old($Heap)[$o, $allocated] == true)) && (((old($Heap)[$o, $ownerFrame] == $PeerGroupPlaceholder) || !(old($Heap)[old($Heap)[$o, $ownerRef], $inv] <: old($Heap)[$o, $ownerFrame])) || (old($Heap)[old($Heap)[$o, $ownerRef], $localinv] == $BaseClass(old($Heap)[$o, $ownerFrame])))) && old(true)) && old(true)) ==> (old($Heap)[$o, $f] == $Heap[$o, $f])));
  free ensures (forall $o : ref :: (((old($Heap)[$o, $inv] == $Heap[$o, $inv]) && (old($Heap)[$o, $localinv] == $Heap[$o, $localinv])) || (old($Heap)[$o, $allocated] != true)));
  free ensures (((forall $o : ref :: ((old($Heap)[$o, $allocated] == true) ==> ($Heap[$o, $allocated] == true))) && (forall $ot : ref :: (((old($Heap)[$ot, $allocated] == true) && (old($Heap)[$ot, $ownerFrame] != $PeerGroupPlaceholder)) ==> (($Heap[$ot, $ownerRef] == old($Heap)[$ot, $ownerRef]) && ($Heap[$ot, $ownerFrame] == old($Heap)[$ot, $ownerFrame]))))) && (old($Heap)[$BeingConstructed, $NonNullFieldsAreInitialized] == $Heap[$BeingConstructed, $NonNullFieldsAreInitialized]));
  free ensures (forall $o : ref :: (old($Heap[$o, $sharingMode]) == $Heap[$o, $sharingMode]));
  

implementation Bag..cctor() {
  entry: goto block13651;
  block13651: goto block13770;
  block13770: goto block13787;
  block13787: goto block13804;
  block13804: return;
  
}

