// This is the abstract grammar for FreeBoogie used to generate
// the AST. See also the template (*.tpl) files.

Program =
  String fileName,
  [list] TypeDecl types,
  [list] Axiom axioms,
  [list] VariableDecl variables,
  [list] ConstDecl constants, 
  [list] FunctionDecl functions,
  [list] Procedure procedures,
  [list] Implementation implementations;

// Provide a common class for AST nodes that can act as a
// definition for an Identifier.
IdDecl :> 
  ConstDecl, 
  VariableDecl;
IdDecl =
  String! name,
  Type! type;

// Group all elements that can have attributes.
Declaration :> 
  TypeDecl, 
  Axiom, 
  IdDecl, 
  FunctionDecl, 
  Procedure, 
  Implementation;
Declaration =
  [list] Attribute attributes;

TypeDecl = 
  boolean finite, 
  String! name,
  [list] Identifier typeArgs, // TODO(radugrigore): rename to typeVars
  Type type; // non-null when this is a type synonym
Axiom =
  String! name,
  [list] Identifier typeArgs,
  Expr! expr;
VariableDecl =
  [list] Identifier typeArgs,
  Expr where;
ConstDecl = 
  boolean uniq;
FunctionDecl = 
  Signature! sig;
Procedure =
  Signature! sig,
  [list] PreSpec preconditions,
  [list] PostSpec postconditions,
  [list] ModifiesSpec modifies;
Implementation =
  Signature! sig,
  Body! body;

// Types and constants
Type :> 
  MapType, 
  PrimitiveType, 
  TupleType,
  UserType;
MapType = 
  [list] Identifier typeVars,
  [list] Type idxTypes,
  Type! elemType;
PrimitiveType = 
  enum(Ptype: BOOL, INT, ERROR) ptype,
  int bits;  // if -1, then it's a mathematical integer
TupleType =
  [list] Type types;
UserType = 
  String! name, 
  [list] Type typeArgs;

// Signatures are used to represent uninterpreted functions
Signature = 
  String! name, 
  [list] Identifier typeArgs,
  [list] VariableDecl args,
  [list] VariableDecl results;

// Procedures and implementations
Specification :> 
  PrePostSpec,
  ModifiesSpec;
Specification =
  boolean free;
PrePostSpec :>
  PreSpec,
  PostSpec;
PrePostSpec =
  [list] Identifier typeArgs,
  Expr! expr;
ModifiesSpec =
  [list] Identifier ids;
Body = 
  [list] VariableDecl vars,
  Block! block;
Block =
  [list] Command commands; 

// Commands
Command :> 
  AssertAssumeCmd, 
  AssignmentCmd, 
  BreakCmd,
  CallCmd, 
  GotoCmd,
  HavocCmd,
  IfCmd,
  WhileCmd;
Command =
  [list] String labels;
AssignmentCmd = 
  [list] OneAssignment assignments;
OneAssignment =
  Identifier lhs,
  Expr rhs;
BreakCmd =
  String successor;
AssertAssumeCmd = 
  enum(CmdType: ASSERT, ASSUME) type, 
  [list] Identifier typeArgs, 
  Expr! expr;
GotoCmd =
  [list] String successors; // if successors.isEmpty() then it's "return"
HavocCmd = 
  [list] Identifier ids;
CallCmd = 
  String! procedure, 
  [list] Type types, 
  [list] Identifier results,
  [list] Expr args;
WhileCmd = 
  Expr condition, 
  [list] LoopInvariant inv, 
  Block body;
IfCmd =
  Expr! condition,
  Block! yes,
  Block no;
LoopInvariant = 
  boolean free, 
  Expr! expr;

Attribute = 
  String! type, 
  [list] Expr exprs;

// Expressions
Expr :> 
  BinaryOp, 
  BooleanLiteral,
  Cast,
  FunctionApp,
  Identifier,
  MapSelect,
  MapUpdate,
  NumberLiteral,
  OldExpr,
  Quantifier,
  Slice,
  UnaryOp;
BinaryOp = 
  enum(Op:
    PLUS,MINUS,
    MUL,DIV,MOD,
    EQ,NEQ,LT,LE,GE,GT,
    SUBTYPE,
    EQUIV,IMPLIES,
    AND,OR,
    CONCAT) op,
  Expr! left, 
  Expr! right;
Cast =
  Expr! expr,
  Type! type;
UnaryOp = 
  enum(Op: MINUS, NOT) op, 
  Expr! expr;
BooleanLiteral = 
  enum(Type: FALSE, TRUE) val;
NumberLiteral = 
  FbInteger value;
Identifier = 
  String! id, 
  [list] Type types;
FunctionApp = 
  String! function, 
  [list] Type types, 
  [list] Expr args;
OldExpr = 
  Expr! expr;
Quantifier =
  enum(QuantType: EXISTS, FORALL) quant,
  [list] Identifier typeVariables,
  [list] VariableDecl vars,
  [list] Attribute attributes,
  Expr! expression;
MapSelect = 
  Expr! map, 
  [list] Expr idx;
MapUpdate = 
  Expr! map, 
  [list] Expr idx, 
  Expr! val;
Slice =
  Expr! bv,
  NumberLiteral! low,
  NumberLiteral! high;

// the invariants
MapSelect: !idx.isEmpty()
MapUpdate: !idx.isEmpty()
HavocCmd: !ids.isEmpty()
Body: !block.commands().isEmpty() && block.commands().get(block.commands().size()-1) instanceof GotoCmd

// TODO(radugrigore): rename using whole words
