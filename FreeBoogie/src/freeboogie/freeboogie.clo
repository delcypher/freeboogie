NAME::
  FbCli
  :"FreeBoogie is a verifier for Boogie programs. The valid options are:"

ARGS::
  Files :{} :{file-list} :[mustExist,canBeDir="false",between="",allowMultiple="false"]
    :"Configure the list of files to check."

  // select what to do
  StageCount :{"--stage-count", "-sc"} :{int} :[default="1000"]
    :"Stops after processing the given number of stages."
  CheckProcedure :{"--check-procedure", "-cp"}: {string}
    :"Check only the procedures whose name match the given regular
      expression."

  // configure how various stages work
  PassivatorOpt :{"--passivator"} :{enum}
    :[choices="OPTIM,ESCJAVA", default="optim"]
    :"The optim passivator introduces a minimum number of new
      variables. The escjava algorithm can be selected for doing
      performance measurements: It should always be worse."
  VcMethodOpt :{"--vc-method", "-vm"} :{enum}
    :[choices="wp(WP),sp(SP)", default="wp"]
    :"Configure which method should be used for building a VC from the
      transformed Boogie."
  AssumeAsserts :{"--assume-asserts", "-aa"}
    :"If set, then 'assert X' is treated as 'assert X; assume X'."
  ProverOpt :{"--prover", "-p"} :{enum}
    :[choices="SIMPLIFY,YESMAN", default="simplify"]
    :"Configure which prover to use. The prover 'yes' can be useful
      for debugging (and for doing demos) because it always says that
      the code is OK."
  ProverCommandLineOpt :{"--prover-command-line", "-pcl"} :{string}
    :"Configure the command line used to start a prover. The default
      depends on the selected prover."

  // control output
  ReportOn :{"--out-categories", "-oc"} :{enum-list}
    :[choices="MAIN,PARSER",default="MAIN"]
    :"Configure what type of information should go to stdout.
      By default all categories are disabled. Errors go to stderr."
  ReportLevel :{"--out-level", "-ol"} :{enum}
    :[choices="DEBUG,VERBOSE,NORMAL,QUIET", default="normal"]
    :"Configure how much information goes to stdout."
  LogFile :{"--log-file", "-lf"} :{file}
    :[canBeDir="false",default="freeboogie.log"]
    :"Configure where logging should be done. If the file does not exist
      it is created; if the file does exist the new log messages are appended."
  LogCategories :{"--log-categories", "-lc"} :{enum-list}
    :[choices="MAIN,VCGEN,PROVER,STATS,BACKEND,AST,TYPECHECK"]
    :"Configure what type of information should go in the log file.
      By default all categories are disabled."
  LogLevel :{"--log-level", "-ll"} :{enum}
    :[choices="INFO,WARNING,ERROR", default="warning"]
    :"Configure how much information should be logged."
  DumpIntermediateStages :{"--dump-intermediate-stages", "-dis"} :{file}
    :[canExist="false"]
    :"Specify a directory where to dump the result of each transformation.
      The dump includes a Boogie program, its symbol table, and its
      flowgraphs."

  // unusual things, perhaps to remove
  SeriesParallelCheck :{"--series-parallel-check", "-spc"}
    :[allowArg="false"]
    :"Checks if the flowgraphs are series--parallel."

  Help :{"--help", "-h"}
    :"Display this message."

FORMAT::
  (Option | Files)* | Help;

WHERE::
  Option:
    SelectOption |
    ConfigOption |
    OutputOption |
    WeirdOption;

  SelectOption:
    StageCount |
    CheckProcedure;
  ConfigOption:
    PassivatorOpt |
    VcMethodOpt |
    AssumeAsserts |
    ProverOpt |
    ProverCommandLineOpt;
  OutputOption:
    LogFile |
    LogCategories |
    LogLevel |
    ReportOn |
    ReportLevel |
    DumpIntermediateStages;
  WeirdOption:
    SeriesParallelCheck;

OVERRIDES::
  {$(ProverOpt).toLowerCase().equals("simplify") && !$(ProverCommandLineOpt?)} ->
    ProverCommandLineOpt := {"z3 -si"};
